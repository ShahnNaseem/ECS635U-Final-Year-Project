// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: argeo/ardk-next/common/protos/ardk_next_telemetry.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Niantic.Lightship.AR.Protobuf {

  /// <summary>Holder for reflection information generated from argeo/ardk-next/common/protos/ardk_next_telemetry.proto</summary>
  public static partial class ArdkNextTelemetryReflection {

    #region Descriptor
    /// <summary>File descriptor for argeo/ardk-next/common/protos/ardk_next_telemetry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ArdkNextTelemetryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjdhcmdlby9hcmRrLW5leHQvY29tbW9uL3Byb3Rvcy9hcmRrX25leHRfdGVs",
            "ZW1ldHJ5LnByb3RvEg5hcmRrLnRlbGVtZXRyeRo2YXJnZW8vYXJkay1uZXh0",
            "L2NvbW1vbi9wcm90b3MvYXJfY29tbW9uX21ldGFkYXRhLnByb3RvIpcOChpB",
            "cmRrTmV4dFRlbGVtZXRyeU9tbmlQcm90bxJDChRpbml0aWFsaXphdGlvbl9l",
            "dmVudBgBIAEoCzIjLmFyZGsudGVsZW1ldHJ5LkluaXRpYWxpemF0aW9uRXZl",
            "bnRIABJLChlzY2FuX3JlY29yZGVyX3N0YXJ0X2V2ZW50GAIgASgLMiYuYXJk",
            "ay50ZWxlbWV0cnkuU2NhblJlY29yZGVyU3RhcnRFdmVudEgAEkkKGHNjYW5f",
            "cmVjb3JkZXJfc3RvcF9ldmVudBgDIAEoCzIlLmFyZGsudGVsZW1ldHJ5LlNj",
            "YW5SZWNvcmRlclN0b3BFdmVudEgAEj0KEnNjYW5fc3FjX3J1bl9ldmVudBgE",
            "IAEoCzIfLmFyZGsudGVsZW1ldHJ5LlNjYW5TUUNSdW5FdmVudEgAEj8KE3Nj",
            "YW5fc3FjX2RvbmVfZXZlbnQYBSABKAsyIC5hcmRrLnRlbGVtZXRyeS5TY2Fu",
            "U1FDRG9uZUV2ZW50SAASOgoQc2Nhbl9lcnJvcl9ldmVudBgGIAEoCzIeLmFy",
            "ZGsudGVsZW1ldHJ5LlNjYW5FcnJvckV2ZW50SAASaAopc2Nhbl9hcmNoaXZl",
            "X2J1aWxkZXJfZ2V0X25leHRfY2h1bmtfZXZlbnQYByABKAsyMy5hcmRrLnRl",
            "bGVtZXRyeS5TY2FuQXJjaGl2ZUJ1aWxkZXJHZXROZXh0Q2h1bmtFdmVudEgA",
            "EloKIXNjYW5fYXJjaGl2ZV9idWlsZGVyX2NhbmNlbF9ldmVudBgIIAEoCzIt",
            "LmFyZGsudGVsZW1ldHJ5LlNjYW5BcmNoaXZlQnVpbGRlckNhbmNlbEV2ZW50",
            "SAASVQoednBzX2xvY2FsaXphdGlvbl9zdGFydGVkX2V2ZW50GAkgASgLMisu",
            "YXJkay50ZWxlbWV0cnkuVnBzTG9jYWxpemF0aW9uU3RhcnRlZEV2ZW50SAAS",
            "VQoednBzX2xvY2FsaXphdGlvbl9zdWNjZXNzX2V2ZW50GAogASgLMisuYXJk",
            "ay50ZWxlbWV0cnkuVnBzTG9jYWxpemF0aW9uU3VjY2Vzc0V2ZW50SAASRwoX",
            "dnBzX3Nlc3Npb25fZW5kZWRfZXZlbnQYCyABKAsyJC5hcmRrLnRlbGVtZXRy",
            "eS5WcHNTZXNzaW9uRW5kZWRFdmVudEgAEkUKFmFyX3Nlc3Npb25fc3RhcnRf",
            "ZXZlbnQYDCABKAsyIy5hcmRrLnRlbGVtZXRyeS5BclNlc3Npb25TdGFydEV2",
            "ZW50SAASPAoRZGVwdGhfc3RhcnRfZXZlbnQYDSABKAsyHy5hcmRrLnRlbGVt",
            "ZXRyeS5EZXB0aFN0YXJ0RXZlbnRIABI6ChBkZXB0aF9zdG9wX2V2ZW50GA4g",
            "ASgLMh4uYXJkay50ZWxlbWV0cnkuRGVwdGhTdG9wRXZlbnRIABJEChVzZW1h",
            "bnRpY3Nfc3RhcnRfZXZlbnQYDyABKAsyIy5hcmRrLnRlbGVtZXRyeS5TZW1h",
            "bnRpY3NTdGFydEV2ZW50SAASQgoUc2VtYW50aWNzX3N0b3BfZXZlbnQYECAB",
            "KAsyIi5hcmRrLnRlbGVtZXRyeS5TZW1hbnRpY3NTdG9wRXZlbnRIABJAChNt",
            "ZXNoaW5nX3N0YXJ0X2V2ZW50GBEgASgLMiEuYXJkay50ZWxlbWV0cnkuTWVz",
            "aGluZ1N0YXJ0RXZlbnRIABI+ChJtZXNoaW5nX3N0b3BfZXZlbnQYEiABKAsy",
            "IC5hcmRrLnRlbGVtZXRyeS5NZXNoaW5nU3RvcEV2ZW50SAASUQocb2JqZWN0",
            "X2RldGVjdGlvbl9zdGFydF9ldmVudBgTIAEoCzIpLmFyZGsudGVsZW1ldHJ5",
            "Lk9iamVjdERldGVjdGlvblN0YXJ0RXZlbnRIABJPChtvYmplY3RfZGV0ZWN0",
            "aW9uX3N0b3BfZXZlbnQYFCABKAsyKC5hcmRrLnRlbGVtZXRyeS5PYmplY3RE",
            "ZXRlY3Rpb25TdG9wRXZlbnRIABI4Cg93cHNfc3RhcnRfZXZlbnQYFSABKAsy",
            "HS5hcmRrLnRlbGVtZXRyeS5XcHNTdGFydEV2ZW50SAASQAoTd3BzX2F2YWls",
            "YWJsZV9ldmVudBgWIAEoCzIhLmFyZGsudGVsZW1ldHJ5Lldwc0F2YWlsYWJs",
            "ZUV2ZW50SAASNgoOd3BzX3N0b3BfZXZlbnQYFyABKAsyHC5hcmRrLnRlbGVt",
            "ZXRyeS5XcHNTdG9wRXZlbnRIABI8ChJhcl9jb21tb25fbWV0YWRhdGEY6Acg",
            "ASgLMh8ubmFyLnRlbGVtZXRyeS5BUkNvbW1vbk1ldGFkYXRhEhYKDWRldmVs",
            "b3Blcl9rZXkY6QcgASgJEhUKDHRpbWVzdGFtcF9tcxjqByABKANCEQoPdGVs",
            "ZW1ldHJ5X2V2ZW50Ij4KE0luaXRpYWxpemF0aW9uRXZlbnQSFAoMaW5zdGFs",
            "bF9tb2RlGAEgASgJEhEKCXByb2Nlc3NvchgCIAEoCSJWChtWcHNMb2NhbGl6",
            "YXRpb25TdGFydGVkRXZlbnQSHwoXbG9jYWxpemF0aW9uX3RhcmdldF9pZHMY",
            "ASADKAkSFgoOdnBzX3Nlc3Npb25faWQYAiABKAkijwEKG1Zwc0xvY2FsaXph",
            "dGlvblN1Y2Nlc3NFdmVudBIeChZsb2NhbGl6YXRpb25fdGFyZ2V0X2lkGAEg",
            "ASgJEhYKDnZwc19zZXNzaW9uX2lkGAIgASgJEhsKE3RpbWVfdG9fbG9jYWxp",
            "emVfbXMYAyABKAMSGwoTbnVtX3NlcnZlcl9yZXF1ZXN0cxgEIAEoBSKXAgoU",
            "VnBzU2Vzc2lvbkVuZGVkRXZlbnQSFgoOdnBzX3Nlc3Npb25faWQYASABKAkS",
            "GwoTbnVtX3NlcnZlcl9yZXF1ZXN0cxgCIAEoBRIXCg90aW1lX3RyYWNrZWRf",
            "bXMYAyABKAMSHQoVdG90YWxfc2Vzc2lvbl90aW1lX21zGAQgASgDElgKE25l",
            "dHdvcmtfZXJyb3JfY29kZXMYBSADKAsyOy5hcmRrLnRlbGVtZXRyeS5WcHNT",
            "ZXNzaW9uRW5kZWRFdmVudC5OZXR3b3JrRXJyb3JDb2Rlc0VudHJ5GjgKFk5l",
            "dHdvcmtFcnJvckNvZGVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIg",
            "ASgFOgI4ASKBAgoWU2NhblJlY29yZGVyU3RhcnRFdmVudBIPCgdzY2FuX2lk",
            "GAEgASgJEkgKDGRlcHRoX3NvdXJjZRgCIAEoDjIyLmFyZGsudGVsZW1ldHJ5",
            "LlNjYW5SZWNvcmRlclN0YXJ0RXZlbnQuRGVwdGhTb3VyY2USEQoJZnJhbWVy",
            "YXRlGAMgASgNEhgKEGlzX3ZveGVsX2VuYWJsZWQYBCABKAgSGgoSaXNfcmF5",
            "Y2FzdF9lbmFibGVkGAUgASgIIkMKC0RlcHRoU291cmNlEgsKB1VOS05PV04Q",
            "ABIJCgVMSURBUhABEg4KCk1VTFRJREVQVEgQAhIMCghOT19ERVBUSBADIssB",
            "ChVTY2FuUmVjb3JkZXJTdG9wRXZlbnQSDwoHc2Nhbl9pZBgBIAEoCRJCCglv",
            "cGVyYXRpb24YAiABKA4yLy5hcmRrLnRlbGVtZXRyeS5TY2FuUmVjb3JkZXJT",
            "dG9wRXZlbnQuT3BlcmF0aW9uEhgKEHNjYW5fZHVyYXRpb25fbXMYAyABKA0S",
            "HwoXbnVtZXJfb2ZfZnJhbWVzX2luX3NjYW4YBCABKA0iIgoJT3BlcmF0aW9u",
            "EggKBFNBVkUQABILCgdESVNDQVJEEAEiIgoPU2NhblNRQ1J1bkV2ZW50Eg8K",
            "B3NjYW5faWQYASABKAkiuAMKEFNjYW5TUUNEb25lRXZlbnQSDwoHc2Nhbl9p",
            "ZBgBIAEoCRIVCg1vdmVyYWxsX3Njb3JlGAIgASgCEhYKDnRpbWVfZWxhcHNl",
            "X21zGAMgASgNEkwKDmZhaWxlZF9yZWFzb25zGAQgAygLMjQuYXJkay50ZWxl",
            "bWV0cnkuU2NhblNRQ0RvbmVFdmVudC5TY2FuU1FDRmFpbGVkUmVhc29uGpUC",
            "ChNTY2FuU1FDRmFpbGVkUmVhc29uElgKDWZhaWxlZF9yZWFzb24YASABKA4y",
            "QS5hcmRrLnRlbGVtZXRyeS5TY2FuU1FDRG9uZUV2ZW50LlNjYW5TUUNGYWls",
            "ZWRSZWFzb24uRmFpbGVkUmVhc29uEg0KBXNjb3JlGAIgASgCIpQBCgxGYWls",
            "ZWRSZWFzb24SCgoGQkxVUlJZEAASCQoFREFSREsQARIPCgtCQURfUVVBTElU",
            "WRACEhIKDkdST1VORF9PUl9GRUVUEAMSEgoOSU5ET09SX1VOQ0xFQVIQBBIM",
            "CghGUk9NX0NBUhAFEg4KCk9CU1RSVUNURUQQBhIWChJUQVJHRVRfTk9UX1ZJ",
            "U0lCTEUQByK0AgoOU2NhbkVycm9yRXZlbnQSDwoHc2Nhbl9pZBgBIAEoCRI4",
            "CgplcnJvcl9jb2RlGAIgASgOMiQuYXJkay50ZWxlbWV0cnkuU2NhbkVycm9y",
            "RXZlbnQuRXJyb3ISFQoNZXJyb3JfbWVzc2FnZRgDIAEoCSK/AQoFRXJyb3IS",
            "CwoHVU5LTk9XThAAEhEKDVNRQ19OT1RfUkVBRFkQARIRCg1TUUNfQkFEX0lO",
            "UFVUEAISEQoNU1FDX0JBRF9NT0RFTBADEhcKE1NRQ19NT0RFTF9SRUFEX0ZB",
            "SUwQBBIUChBTUUNfREVDUllQVF9GQUlMEAUSEwoPU1FDX1VOUEFDS19GQUlM",
            "EAYSFwoTU1FDX05PX0lOUFVUX0ZSQU1FUxAHEhMKD1NRQ19JTlRFUlJVUFRF",
            "RBAIIoIBCiNTY2FuQXJjaGl2ZUJ1aWxkZXJHZXROZXh0Q2h1bmtFdmVudBIP",
            "CgdzY2FuX2lkGAEgASgJEiAKGGNodW5rX2ZpbGVfc2l6ZV9pbl9ieXRlcxgC",
            "IAEoBBIQCghjaHVua19pZBgDIAEoDRIWCg50aW1lX2VsYXBzZV9tcxgEIAEo",
            "DSJaCh1TY2FuQXJjaGl2ZUJ1aWxkZXJDYW5jZWxFdmVudBIPCgdzY2FuX2lk",
            "GAEgASgJEhAKCGNodW5rX2lkGAIgASgNEhYKDnRpbWVfZWxhcHNlX21zGAMg",
            "ASgNIioKE0FyU2Vzc2lvblN0YXJ0RXZlbnQSEwoLZW1wdHlfZmllbGQYYyAB",
            "KAgiJgoPRGVwdGhTdGFydEV2ZW50EhMKC2VtcHR5X2ZpZWxkGGMgASgIIikK",
            "DkRlcHRoU3RvcEV2ZW50EhcKD3RpbWVfZWxhcHNlZF9tcxgBIAEoDSIqChNT",
            "ZW1hbnRpY3NTdGFydEV2ZW50EhMKC2VtcHR5X2ZpZWxkGGMgASgIIi0KElNl",
            "bWFudGljc1N0b3BFdmVudBIXCg90aW1lX2VsYXBzZWRfbXMYASABKA0iKAoR",
            "TWVzaGluZ1N0YXJ0RXZlbnQSEwoLZW1wdHlfZmllbGQYYyABKAgiKwoQTWVz",
            "aGluZ1N0b3BFdmVudBIXCg90aW1lX2VsYXBzZWRfbXMYASABKA0iMAoZT2Jq",
            "ZWN0RGV0ZWN0aW9uU3RhcnRFdmVudBITCgtlbXB0eV9maWVsZBhjIAEoCCIz",
            "ChhPYmplY3REZXRlY3Rpb25TdG9wRXZlbnQSFwoPdGltZV9lbGFwc2VkX21z",
            "GAEgASgNIicKDVdwc1N0YXJ0RXZlbnQSFgoOd3BzX3Nlc3Npb25faWQYASAB",
            "KAkiagoRV3BzQXZhaWxhYmxlRXZlbnQSFgoOd3BzX3Nlc3Npb25faWQYASAB",
            "KAkSHAoUdGltZV90b19hdmFpbGFibGVfbXMYAiABKAMSHwoXZGlzdGFuY2Vf",
            "dG9fYXZhaWxhYmxlX20YAyABKAIiWwoMV3BzU3RvcEV2ZW50EhYKDndwc19z",
            "ZXNzaW9uX2lkGAEgASgJEhcKD3Nlc3Npb25fdGltZV9tcxgCIAEoAxIaChJz",
            "ZXNzaW9uX2Rpc3RhbmNlX20YAyABKAJCYgoeY29tLm5pYW50aWNsYWJzLmFy",
            "ZGsudGVsZW1ldHJ5WiBuaWFudGljL2xpZ2h0c2hpcC9hcmRrL3RlbGVtZXRy",
            "eaoCHU5pYW50aWMuTGlnaHRzaGlwLkFSLlByb3RvYnVmYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Niantic.ARDK.AR.Protobuf.ArCommonMetadataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryOmniProto), global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryOmniProto.Parser, new[]{ "InitializationEvent", "ScanRecorderStartEvent", "ScanRecorderStopEvent", "ScanSqcRunEvent", "ScanSqcDoneEvent", "ScanErrorEvent", "ScanArchiveBuilderGetNextChunkEvent", "ScanArchiveBuilderCancelEvent", "VpsLocalizationStartedEvent", "VpsLocalizationSuccessEvent", "VpsSessionEndedEvent", "ArSessionStartEvent", "DepthStartEvent", "DepthStopEvent", "SemanticsStartEvent", "SemanticsStopEvent", "MeshingStartEvent", "MeshingStopEvent", "ObjectDetectionStartEvent", "ObjectDetectionStopEvent", "WpsStartEvent", "WpsAvailableEvent", "WpsStopEvent", "ArCommonMetadata", "DeveloperKey", "TimestampMs" }, new[]{ "TelemetryEvent" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.InitializationEvent), global::Niantic.Lightship.AR.Protobuf.InitializationEvent.Parser, new[]{ "InstallMode", "Processor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.VpsLocalizationStartedEvent), global::Niantic.Lightship.AR.Protobuf.VpsLocalizationStartedEvent.Parser, new[]{ "LocalizationTargetIds", "VpsSessionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.VpsLocalizationSuccessEvent), global::Niantic.Lightship.AR.Protobuf.VpsLocalizationSuccessEvent.Parser, new[]{ "LocalizationTargetId", "VpsSessionId", "TimeToLocalizeMs", "NumServerRequests" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.VpsSessionEndedEvent), global::Niantic.Lightship.AR.Protobuf.VpsSessionEndedEvent.Parser, new[]{ "VpsSessionId", "NumServerRequests", "TimeTrackedMs", "TotalSessionTimeMs", "NetworkErrorCodes" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.ScanRecorderStartEvent), global::Niantic.Lightship.AR.Protobuf.ScanRecorderStartEvent.Parser, new[]{ "ScanId", "DepthSource", "Framerate", "IsVoxelEnabled", "IsRaycastEnabled" }, null, new[]{ typeof(global::Niantic.Lightship.AR.Protobuf.ScanRecorderStartEvent.Types.DepthSource) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.ScanRecorderStopEvent), global::Niantic.Lightship.AR.Protobuf.ScanRecorderStopEvent.Parser, new[]{ "ScanId", "Operation", "ScanDurationMs", "NumerOfFramesInScan" }, null, new[]{ typeof(global::Niantic.Lightship.AR.Protobuf.ScanRecorderStopEvent.Types.Operation) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.ScanSQCRunEvent), global::Niantic.Lightship.AR.Protobuf.ScanSQCRunEvent.Parser, new[]{ "ScanId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent), global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent.Parser, new[]{ "ScanId", "OverallScore", "TimeElapseMs", "FailedReasons" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent.Types.ScanSQCFailedReason), global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent.Types.ScanSQCFailedReason.Parser, new[]{ "FailedReason", "Score" }, null, new[]{ typeof(global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent.Types.ScanSQCFailedReason.Types.FailedReason) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.ScanErrorEvent), global::Niantic.Lightship.AR.Protobuf.ScanErrorEvent.Parser, new[]{ "ScanId", "ErrorCode", "ErrorMessage" }, null, new[]{ typeof(global::Niantic.Lightship.AR.Protobuf.ScanErrorEvent.Types.Error) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.ScanArchiveBuilderGetNextChunkEvent), global::Niantic.Lightship.AR.Protobuf.ScanArchiveBuilderGetNextChunkEvent.Parser, new[]{ "ScanId", "ChunkFileSizeInBytes", "ChunkId", "TimeElapseMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.ScanArchiveBuilderCancelEvent), global::Niantic.Lightship.AR.Protobuf.ScanArchiveBuilderCancelEvent.Parser, new[]{ "ScanId", "ChunkId", "TimeElapseMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.ArSessionStartEvent), global::Niantic.Lightship.AR.Protobuf.ArSessionStartEvent.Parser, new[]{ "EmptyField" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.DepthStartEvent), global::Niantic.Lightship.AR.Protobuf.DepthStartEvent.Parser, new[]{ "EmptyField" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.DepthStopEvent), global::Niantic.Lightship.AR.Protobuf.DepthStopEvent.Parser, new[]{ "TimeElapsedMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.SemanticsStartEvent), global::Niantic.Lightship.AR.Protobuf.SemanticsStartEvent.Parser, new[]{ "EmptyField" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.SemanticsStopEvent), global::Niantic.Lightship.AR.Protobuf.SemanticsStopEvent.Parser, new[]{ "TimeElapsedMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.MeshingStartEvent), global::Niantic.Lightship.AR.Protobuf.MeshingStartEvent.Parser, new[]{ "EmptyField" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.MeshingStopEvent), global::Niantic.Lightship.AR.Protobuf.MeshingStopEvent.Parser, new[]{ "TimeElapsedMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.ObjectDetectionStartEvent), global::Niantic.Lightship.AR.Protobuf.ObjectDetectionStartEvent.Parser, new[]{ "EmptyField" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.ObjectDetectionStopEvent), global::Niantic.Lightship.AR.Protobuf.ObjectDetectionStopEvent.Parser, new[]{ "TimeElapsedMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.WpsStartEvent), global::Niantic.Lightship.AR.Protobuf.WpsStartEvent.Parser, new[]{ "WpsSessionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.WpsAvailableEvent), global::Niantic.Lightship.AR.Protobuf.WpsAvailableEvent.Parser, new[]{ "WpsSessionId", "TimeToAvailableMs", "DistanceToAvailableM" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Niantic.Lightship.AR.Protobuf.WpsStopEvent), global::Niantic.Lightship.AR.Protobuf.WpsStopEvent.Parser, new[]{ "WpsSessionId", "SessionTimeMs", "SessionDistanceM" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Usage: All telemetry events should be set for publishing AFTER the user has had a chance to set userId
  /// </summary>
  public sealed partial class ArdkNextTelemetryOmniProto : pb::IMessage<ArdkNextTelemetryOmniProto> {
    private static readonly pb::MessageParser<ArdkNextTelemetryOmniProto> _parser = new pb::MessageParser<ArdkNextTelemetryOmniProto>(() => new ArdkNextTelemetryOmniProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArdkNextTelemetryOmniProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArdkNextTelemetryOmniProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArdkNextTelemetryOmniProto(ArdkNextTelemetryOmniProto other) : this() {
      ArCommonMetadata = other.arCommonMetadata_ != null ? other.ArCommonMetadata.Clone() : null;
      developerKey_ = other.developerKey_;
      timestampMs_ = other.timestampMs_;
      switch (other.TelemetryEventCase) {
        case TelemetryEventOneofCase.InitializationEvent:
          InitializationEvent = other.InitializationEvent.Clone();
          break;
        case TelemetryEventOneofCase.ScanRecorderStartEvent:
          ScanRecorderStartEvent = other.ScanRecorderStartEvent.Clone();
          break;
        case TelemetryEventOneofCase.ScanRecorderStopEvent:
          ScanRecorderStopEvent = other.ScanRecorderStopEvent.Clone();
          break;
        case TelemetryEventOneofCase.ScanSqcRunEvent:
          ScanSqcRunEvent = other.ScanSqcRunEvent.Clone();
          break;
        case TelemetryEventOneofCase.ScanSqcDoneEvent:
          ScanSqcDoneEvent = other.ScanSqcDoneEvent.Clone();
          break;
        case TelemetryEventOneofCase.ScanErrorEvent:
          ScanErrorEvent = other.ScanErrorEvent.Clone();
          break;
        case TelemetryEventOneofCase.ScanArchiveBuilderGetNextChunkEvent:
          ScanArchiveBuilderGetNextChunkEvent = other.ScanArchiveBuilderGetNextChunkEvent.Clone();
          break;
        case TelemetryEventOneofCase.ScanArchiveBuilderCancelEvent:
          ScanArchiveBuilderCancelEvent = other.ScanArchiveBuilderCancelEvent.Clone();
          break;
        case TelemetryEventOneofCase.VpsLocalizationStartedEvent:
          VpsLocalizationStartedEvent = other.VpsLocalizationStartedEvent.Clone();
          break;
        case TelemetryEventOneofCase.VpsLocalizationSuccessEvent:
          VpsLocalizationSuccessEvent = other.VpsLocalizationSuccessEvent.Clone();
          break;
        case TelemetryEventOneofCase.VpsSessionEndedEvent:
          VpsSessionEndedEvent = other.VpsSessionEndedEvent.Clone();
          break;
        case TelemetryEventOneofCase.ArSessionStartEvent:
          ArSessionStartEvent = other.ArSessionStartEvent.Clone();
          break;
        case TelemetryEventOneofCase.DepthStartEvent:
          DepthStartEvent = other.DepthStartEvent.Clone();
          break;
        case TelemetryEventOneofCase.DepthStopEvent:
          DepthStopEvent = other.DepthStopEvent.Clone();
          break;
        case TelemetryEventOneofCase.SemanticsStartEvent:
          SemanticsStartEvent = other.SemanticsStartEvent.Clone();
          break;
        case TelemetryEventOneofCase.SemanticsStopEvent:
          SemanticsStopEvent = other.SemanticsStopEvent.Clone();
          break;
        case TelemetryEventOneofCase.MeshingStartEvent:
          MeshingStartEvent = other.MeshingStartEvent.Clone();
          break;
        case TelemetryEventOneofCase.MeshingStopEvent:
          MeshingStopEvent = other.MeshingStopEvent.Clone();
          break;
        case TelemetryEventOneofCase.ObjectDetectionStartEvent:
          ObjectDetectionStartEvent = other.ObjectDetectionStartEvent.Clone();
          break;
        case TelemetryEventOneofCase.ObjectDetectionStopEvent:
          ObjectDetectionStopEvent = other.ObjectDetectionStopEvent.Clone();
          break;
        case TelemetryEventOneofCase.WpsStartEvent:
          WpsStartEvent = other.WpsStartEvent.Clone();
          break;
        case TelemetryEventOneofCase.WpsAvailableEvent:
          WpsAvailableEvent = other.WpsAvailableEvent.Clone();
          break;
        case TelemetryEventOneofCase.WpsStopEvent:
          WpsStopEvent = other.WpsStopEvent.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArdkNextTelemetryOmniProto Clone() {
      return new ArdkNextTelemetryOmniProto(this);
    }

    /// <summary>Field number for the "initialization_event" field.</summary>
    public const int InitializationEventFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.InitializationEvent InitializationEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.InitializationEvent ? (global::Niantic.Lightship.AR.Protobuf.InitializationEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.InitializationEvent;
      }
    }

    /// <summary>Field number for the "scan_recorder_start_event" field.</summary>
    public const int ScanRecorderStartEventFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.ScanRecorderStartEvent ScanRecorderStartEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.ScanRecorderStartEvent ? (global::Niantic.Lightship.AR.Protobuf.ScanRecorderStartEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.ScanRecorderStartEvent;
      }
    }

    /// <summary>Field number for the "scan_recorder_stop_event" field.</summary>
    public const int ScanRecorderStopEventFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.ScanRecorderStopEvent ScanRecorderStopEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.ScanRecorderStopEvent ? (global::Niantic.Lightship.AR.Protobuf.ScanRecorderStopEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.ScanRecorderStopEvent;
      }
    }

    /// <summary>Field number for the "scan_sqc_run_event" field.</summary>
    public const int ScanSqcRunEventFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.ScanSQCRunEvent ScanSqcRunEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.ScanSqcRunEvent ? (global::Niantic.Lightship.AR.Protobuf.ScanSQCRunEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.ScanSqcRunEvent;
      }
    }

    /// <summary>Field number for the "scan_sqc_done_event" field.</summary>
    public const int ScanSqcDoneEventFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent ScanSqcDoneEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.ScanSqcDoneEvent ? (global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.ScanSqcDoneEvent;
      }
    }

    /// <summary>Field number for the "scan_error_event" field.</summary>
    public const int ScanErrorEventFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.ScanErrorEvent ScanErrorEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.ScanErrorEvent ? (global::Niantic.Lightship.AR.Protobuf.ScanErrorEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.ScanErrorEvent;
      }
    }

    /// <summary>Field number for the "scan_archive_builder_get_next_chunk_event" field.</summary>
    public const int ScanArchiveBuilderGetNextChunkEventFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.ScanArchiveBuilderGetNextChunkEvent ScanArchiveBuilderGetNextChunkEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.ScanArchiveBuilderGetNextChunkEvent ? (global::Niantic.Lightship.AR.Protobuf.ScanArchiveBuilderGetNextChunkEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.ScanArchiveBuilderGetNextChunkEvent;
      }
    }

    /// <summary>Field number for the "scan_archive_builder_cancel_event" field.</summary>
    public const int ScanArchiveBuilderCancelEventFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.ScanArchiveBuilderCancelEvent ScanArchiveBuilderCancelEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.ScanArchiveBuilderCancelEvent ? (global::Niantic.Lightship.AR.Protobuf.ScanArchiveBuilderCancelEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.ScanArchiveBuilderCancelEvent;
      }
    }

    /// <summary>Field number for the "vps_localization_started_event" field.</summary>
    public const int VpsLocalizationStartedEventFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.VpsLocalizationStartedEvent VpsLocalizationStartedEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.VpsLocalizationStartedEvent ? (global::Niantic.Lightship.AR.Protobuf.VpsLocalizationStartedEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.VpsLocalizationStartedEvent;
      }
    }

    /// <summary>Field number for the "vps_localization_success_event" field.</summary>
    public const int VpsLocalizationSuccessEventFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.VpsLocalizationSuccessEvent VpsLocalizationSuccessEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.VpsLocalizationSuccessEvent ? (global::Niantic.Lightship.AR.Protobuf.VpsLocalizationSuccessEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.VpsLocalizationSuccessEvent;
      }
    }

    /// <summary>Field number for the "vps_session_ended_event" field.</summary>
    public const int VpsSessionEndedEventFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.VpsSessionEndedEvent VpsSessionEndedEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.VpsSessionEndedEvent ? (global::Niantic.Lightship.AR.Protobuf.VpsSessionEndedEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.VpsSessionEndedEvent;
      }
    }

    /// <summary>Field number for the "ar_session_start_event" field.</summary>
    public const int ArSessionStartEventFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.ArSessionStartEvent ArSessionStartEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.ArSessionStartEvent ? (global::Niantic.Lightship.AR.Protobuf.ArSessionStartEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.ArSessionStartEvent;
      }
    }

    /// <summary>Field number for the "depth_start_event" field.</summary>
    public const int DepthStartEventFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.DepthStartEvent DepthStartEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.DepthStartEvent ? (global::Niantic.Lightship.AR.Protobuf.DepthStartEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.DepthStartEvent;
      }
    }

    /// <summary>Field number for the "depth_stop_event" field.</summary>
    public const int DepthStopEventFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.DepthStopEvent DepthStopEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.DepthStopEvent ? (global::Niantic.Lightship.AR.Protobuf.DepthStopEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.DepthStopEvent;
      }
    }

    /// <summary>Field number for the "semantics_start_event" field.</summary>
    public const int SemanticsStartEventFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.SemanticsStartEvent SemanticsStartEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.SemanticsStartEvent ? (global::Niantic.Lightship.AR.Protobuf.SemanticsStartEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.SemanticsStartEvent;
      }
    }

    /// <summary>Field number for the "semantics_stop_event" field.</summary>
    public const int SemanticsStopEventFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.SemanticsStopEvent SemanticsStopEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.SemanticsStopEvent ? (global::Niantic.Lightship.AR.Protobuf.SemanticsStopEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.SemanticsStopEvent;
      }
    }

    /// <summary>Field number for the "meshing_start_event" field.</summary>
    public const int MeshingStartEventFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.MeshingStartEvent MeshingStartEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.MeshingStartEvent ? (global::Niantic.Lightship.AR.Protobuf.MeshingStartEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.MeshingStartEvent;
      }
    }

    /// <summary>Field number for the "meshing_stop_event" field.</summary>
    public const int MeshingStopEventFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.MeshingStopEvent MeshingStopEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.MeshingStopEvent ? (global::Niantic.Lightship.AR.Protobuf.MeshingStopEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.MeshingStopEvent;
      }
    }

    /// <summary>Field number for the "object_detection_start_event" field.</summary>
    public const int ObjectDetectionStartEventFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.ObjectDetectionStartEvent ObjectDetectionStartEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.ObjectDetectionStartEvent ? (global::Niantic.Lightship.AR.Protobuf.ObjectDetectionStartEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.ObjectDetectionStartEvent;
      }
    }

    /// <summary>Field number for the "object_detection_stop_event" field.</summary>
    public const int ObjectDetectionStopEventFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.ObjectDetectionStopEvent ObjectDetectionStopEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.ObjectDetectionStopEvent ? (global::Niantic.Lightship.AR.Protobuf.ObjectDetectionStopEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.ObjectDetectionStopEvent;
      }
    }

    /// <summary>Field number for the "wps_start_event" field.</summary>
    public const int WpsStartEventFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.WpsStartEvent WpsStartEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.WpsStartEvent ? (global::Niantic.Lightship.AR.Protobuf.WpsStartEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.WpsStartEvent;
      }
    }

    /// <summary>Field number for the "wps_available_event" field.</summary>
    public const int WpsAvailableEventFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.WpsAvailableEvent WpsAvailableEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.WpsAvailableEvent ? (global::Niantic.Lightship.AR.Protobuf.WpsAvailableEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.WpsAvailableEvent;
      }
    }

    /// <summary>Field number for the "wps_stop_event" field.</summary>
    public const int WpsStopEventFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.WpsStopEvent WpsStopEvent {
      get { return telemetryEventCase_ == TelemetryEventOneofCase.WpsStopEvent ? (global::Niantic.Lightship.AR.Protobuf.WpsStopEvent) telemetryEvent_ : null; }
      set {
        telemetryEvent_ = value;
        telemetryEventCase_ = value == null ? TelemetryEventOneofCase.None : TelemetryEventOneofCase.WpsStopEvent;
      }
    }

    /// <summary>Field number for the "ar_common_metadata" field.</summary>
    public const int ArCommonMetadataFieldNumber = 1000;
    private global::Niantic.ARDK.AR.Protobuf.ARCommonMetadata arCommonMetadata_;
    /// <summary>
    ///  Common metadata for all the telemetry protos.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.ARDK.AR.Protobuf.ARCommonMetadata ArCommonMetadata {
      get { return arCommonMetadata_; }
      set {
        arCommonMetadata_ = value;
      }
    }

    /// <summary>Field number for the "developer_key" field.</summary>
    public const int DeveloperKeyFieldNumber = 1001;
    private string developerKey_ = "";
    /// <summary>
    ///  Lightship developer key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeveloperKey {
      get { return developerKey_; }
      set {
        developerKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp_ms" field.</summary>
    public const int TimestampMsFieldNumber = 1002;
    private long timestampMs_;
    /// <summary>
    ///  Timestamp contain an epoch time in millis (millis after Jan 1, 1970 UTC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimestampMs {
      get { return timestampMs_; }
      set {
        timestampMs_ = value;
      }
    }

    private object telemetryEvent_;
    /// <summary>Enum of possible cases for the "telemetry_event" oneof.</summary>
    public enum TelemetryEventOneofCase {
      None = 0,
      InitializationEvent = 1,
      ScanRecorderStartEvent = 2,
      ScanRecorderStopEvent = 3,
      ScanSqcRunEvent = 4,
      ScanSqcDoneEvent = 5,
      ScanErrorEvent = 6,
      ScanArchiveBuilderGetNextChunkEvent = 7,
      ScanArchiveBuilderCancelEvent = 8,
      VpsLocalizationStartedEvent = 9,
      VpsLocalizationSuccessEvent = 10,
      VpsSessionEndedEvent = 11,
      ArSessionStartEvent = 12,
      DepthStartEvent = 13,
      DepthStopEvent = 14,
      SemanticsStartEvent = 15,
      SemanticsStopEvent = 16,
      MeshingStartEvent = 17,
      MeshingStopEvent = 18,
      ObjectDetectionStartEvent = 19,
      ObjectDetectionStopEvent = 20,
      WpsStartEvent = 21,
      WpsAvailableEvent = 22,
      WpsStopEvent = 23,
    }
    private TelemetryEventOneofCase telemetryEventCase_ = TelemetryEventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryEventOneofCase TelemetryEventCase {
      get { return telemetryEventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTelemetryEvent() {
      telemetryEventCase_ = TelemetryEventOneofCase.None;
      telemetryEvent_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArdkNextTelemetryOmniProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArdkNextTelemetryOmniProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InitializationEvent, other.InitializationEvent)) return false;
      if (!object.Equals(ScanRecorderStartEvent, other.ScanRecorderStartEvent)) return false;
      if (!object.Equals(ScanRecorderStopEvent, other.ScanRecorderStopEvent)) return false;
      if (!object.Equals(ScanSqcRunEvent, other.ScanSqcRunEvent)) return false;
      if (!object.Equals(ScanSqcDoneEvent, other.ScanSqcDoneEvent)) return false;
      if (!object.Equals(ScanErrorEvent, other.ScanErrorEvent)) return false;
      if (!object.Equals(ScanArchiveBuilderGetNextChunkEvent, other.ScanArchiveBuilderGetNextChunkEvent)) return false;
      if (!object.Equals(ScanArchiveBuilderCancelEvent, other.ScanArchiveBuilderCancelEvent)) return false;
      if (!object.Equals(VpsLocalizationStartedEvent, other.VpsLocalizationStartedEvent)) return false;
      if (!object.Equals(VpsLocalizationSuccessEvent, other.VpsLocalizationSuccessEvent)) return false;
      if (!object.Equals(VpsSessionEndedEvent, other.VpsSessionEndedEvent)) return false;
      if (!object.Equals(ArSessionStartEvent, other.ArSessionStartEvent)) return false;
      if (!object.Equals(DepthStartEvent, other.DepthStartEvent)) return false;
      if (!object.Equals(DepthStopEvent, other.DepthStopEvent)) return false;
      if (!object.Equals(SemanticsStartEvent, other.SemanticsStartEvent)) return false;
      if (!object.Equals(SemanticsStopEvent, other.SemanticsStopEvent)) return false;
      if (!object.Equals(MeshingStartEvent, other.MeshingStartEvent)) return false;
      if (!object.Equals(MeshingStopEvent, other.MeshingStopEvent)) return false;
      if (!object.Equals(ObjectDetectionStartEvent, other.ObjectDetectionStartEvent)) return false;
      if (!object.Equals(ObjectDetectionStopEvent, other.ObjectDetectionStopEvent)) return false;
      if (!object.Equals(WpsStartEvent, other.WpsStartEvent)) return false;
      if (!object.Equals(WpsAvailableEvent, other.WpsAvailableEvent)) return false;
      if (!object.Equals(WpsStopEvent, other.WpsStopEvent)) return false;
      if (!object.Equals(ArCommonMetadata, other.ArCommonMetadata)) return false;
      if (DeveloperKey != other.DeveloperKey) return false;
      if (TimestampMs != other.TimestampMs) return false;
      if (TelemetryEventCase != other.TelemetryEventCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (telemetryEventCase_ == TelemetryEventOneofCase.InitializationEvent) hash ^= InitializationEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanRecorderStartEvent) hash ^= ScanRecorderStartEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanRecorderStopEvent) hash ^= ScanRecorderStopEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanSqcRunEvent) hash ^= ScanSqcRunEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanSqcDoneEvent) hash ^= ScanSqcDoneEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanErrorEvent) hash ^= ScanErrorEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanArchiveBuilderGetNextChunkEvent) hash ^= ScanArchiveBuilderGetNextChunkEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanArchiveBuilderCancelEvent) hash ^= ScanArchiveBuilderCancelEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.VpsLocalizationStartedEvent) hash ^= VpsLocalizationStartedEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.VpsLocalizationSuccessEvent) hash ^= VpsLocalizationSuccessEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.VpsSessionEndedEvent) hash ^= VpsSessionEndedEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.ArSessionStartEvent) hash ^= ArSessionStartEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.DepthStartEvent) hash ^= DepthStartEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.DepthStopEvent) hash ^= DepthStopEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.SemanticsStartEvent) hash ^= SemanticsStartEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.SemanticsStopEvent) hash ^= SemanticsStopEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.MeshingStartEvent) hash ^= MeshingStartEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.MeshingStopEvent) hash ^= MeshingStopEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.ObjectDetectionStartEvent) hash ^= ObjectDetectionStartEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.ObjectDetectionStopEvent) hash ^= ObjectDetectionStopEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.WpsStartEvent) hash ^= WpsStartEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.WpsAvailableEvent) hash ^= WpsAvailableEvent.GetHashCode();
      if (telemetryEventCase_ == TelemetryEventOneofCase.WpsStopEvent) hash ^= WpsStopEvent.GetHashCode();
      if (arCommonMetadata_ != null) hash ^= ArCommonMetadata.GetHashCode();
      if (DeveloperKey.Length != 0) hash ^= DeveloperKey.GetHashCode();
      if (TimestampMs != 0L) hash ^= TimestampMs.GetHashCode();
      hash ^= (int) telemetryEventCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (telemetryEventCase_ == TelemetryEventOneofCase.InitializationEvent) {
        output.WriteRawTag(10);
        output.WriteMessage(InitializationEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanRecorderStartEvent) {
        output.WriteRawTag(18);
        output.WriteMessage(ScanRecorderStartEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanRecorderStopEvent) {
        output.WriteRawTag(26);
        output.WriteMessage(ScanRecorderStopEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanSqcRunEvent) {
        output.WriteRawTag(34);
        output.WriteMessage(ScanSqcRunEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanSqcDoneEvent) {
        output.WriteRawTag(42);
        output.WriteMessage(ScanSqcDoneEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanErrorEvent) {
        output.WriteRawTag(50);
        output.WriteMessage(ScanErrorEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanArchiveBuilderGetNextChunkEvent) {
        output.WriteRawTag(58);
        output.WriteMessage(ScanArchiveBuilderGetNextChunkEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanArchiveBuilderCancelEvent) {
        output.WriteRawTag(66);
        output.WriteMessage(ScanArchiveBuilderCancelEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.VpsLocalizationStartedEvent) {
        output.WriteRawTag(74);
        output.WriteMessage(VpsLocalizationStartedEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.VpsLocalizationSuccessEvent) {
        output.WriteRawTag(82);
        output.WriteMessage(VpsLocalizationSuccessEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.VpsSessionEndedEvent) {
        output.WriteRawTag(90);
        output.WriteMessage(VpsSessionEndedEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ArSessionStartEvent) {
        output.WriteRawTag(98);
        output.WriteMessage(ArSessionStartEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.DepthStartEvent) {
        output.WriteRawTag(106);
        output.WriteMessage(DepthStartEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.DepthStopEvent) {
        output.WriteRawTag(114);
        output.WriteMessage(DepthStopEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.SemanticsStartEvent) {
        output.WriteRawTag(122);
        output.WriteMessage(SemanticsStartEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.SemanticsStopEvent) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(SemanticsStopEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.MeshingStartEvent) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(MeshingStartEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.MeshingStopEvent) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MeshingStopEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ObjectDetectionStartEvent) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ObjectDetectionStartEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ObjectDetectionStopEvent) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(ObjectDetectionStopEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.WpsStartEvent) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(WpsStartEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.WpsAvailableEvent) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(WpsAvailableEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.WpsStopEvent) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(WpsStopEvent);
      }
      if (arCommonMetadata_ != null) {
        output.WriteRawTag(194, 62);
        output.WriteMessage(ArCommonMetadata);
      }
      if (DeveloperKey.Length != 0) {
        output.WriteRawTag(202, 62);
        output.WriteString(DeveloperKey);
      }
      if (TimestampMs != 0L) {
        output.WriteRawTag(208, 62);
        output.WriteInt64(TimestampMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (telemetryEventCase_ == TelemetryEventOneofCase.InitializationEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitializationEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanRecorderStartEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScanRecorderStartEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanRecorderStopEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScanRecorderStopEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanSqcRunEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScanSqcRunEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanSqcDoneEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScanSqcDoneEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanErrorEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScanErrorEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanArchiveBuilderGetNextChunkEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScanArchiveBuilderGetNextChunkEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ScanArchiveBuilderCancelEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScanArchiveBuilderCancelEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.VpsLocalizationStartedEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VpsLocalizationStartedEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.VpsLocalizationSuccessEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VpsLocalizationSuccessEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.VpsSessionEndedEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VpsSessionEndedEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ArSessionStartEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArSessionStartEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.DepthStartEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DepthStartEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.DepthStopEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DepthStopEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.SemanticsStartEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SemanticsStartEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.SemanticsStopEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SemanticsStopEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.MeshingStartEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MeshingStartEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.MeshingStopEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MeshingStopEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ObjectDetectionStartEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ObjectDetectionStartEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.ObjectDetectionStopEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ObjectDetectionStopEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.WpsStartEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WpsStartEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.WpsAvailableEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WpsAvailableEvent);
      }
      if (telemetryEventCase_ == TelemetryEventOneofCase.WpsStopEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WpsStopEvent);
      }
      if (arCommonMetadata_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ArCommonMetadata);
      }
      if (DeveloperKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeveloperKey);
      }
      if (TimestampMs != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TimestampMs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArdkNextTelemetryOmniProto other) {
      if (other == null) {
        return;
      }
      if (other.arCommonMetadata_ != null) {
        if (arCommonMetadata_ == null) {
          arCommonMetadata_ = new global::Niantic.ARDK.AR.Protobuf.ARCommonMetadata();
        }
        ArCommonMetadata.MergeFrom(other.ArCommonMetadata);
      }
      if (other.DeveloperKey.Length != 0) {
        DeveloperKey = other.DeveloperKey;
      }
      if (other.TimestampMs != 0L) {
        TimestampMs = other.TimestampMs;
      }
      switch (other.TelemetryEventCase) {
        case TelemetryEventOneofCase.InitializationEvent:
          InitializationEvent = other.InitializationEvent;
          break;
        case TelemetryEventOneofCase.ScanRecorderStartEvent:
          ScanRecorderStartEvent = other.ScanRecorderStartEvent;
          break;
        case TelemetryEventOneofCase.ScanRecorderStopEvent:
          ScanRecorderStopEvent = other.ScanRecorderStopEvent;
          break;
        case TelemetryEventOneofCase.ScanSqcRunEvent:
          ScanSqcRunEvent = other.ScanSqcRunEvent;
          break;
        case TelemetryEventOneofCase.ScanSqcDoneEvent:
          ScanSqcDoneEvent = other.ScanSqcDoneEvent;
          break;
        case TelemetryEventOneofCase.ScanErrorEvent:
          ScanErrorEvent = other.ScanErrorEvent;
          break;
        case TelemetryEventOneofCase.ScanArchiveBuilderGetNextChunkEvent:
          ScanArchiveBuilderGetNextChunkEvent = other.ScanArchiveBuilderGetNextChunkEvent;
          break;
        case TelemetryEventOneofCase.ScanArchiveBuilderCancelEvent:
          ScanArchiveBuilderCancelEvent = other.ScanArchiveBuilderCancelEvent;
          break;
        case TelemetryEventOneofCase.VpsLocalizationStartedEvent:
          VpsLocalizationStartedEvent = other.VpsLocalizationStartedEvent;
          break;
        case TelemetryEventOneofCase.VpsLocalizationSuccessEvent:
          VpsLocalizationSuccessEvent = other.VpsLocalizationSuccessEvent;
          break;
        case TelemetryEventOneofCase.VpsSessionEndedEvent:
          VpsSessionEndedEvent = other.VpsSessionEndedEvent;
          break;
        case TelemetryEventOneofCase.ArSessionStartEvent:
          ArSessionStartEvent = other.ArSessionStartEvent;
          break;
        case TelemetryEventOneofCase.DepthStartEvent:
          DepthStartEvent = other.DepthStartEvent;
          break;
        case TelemetryEventOneofCase.DepthStopEvent:
          DepthStopEvent = other.DepthStopEvent;
          break;
        case TelemetryEventOneofCase.SemanticsStartEvent:
          SemanticsStartEvent = other.SemanticsStartEvent;
          break;
        case TelemetryEventOneofCase.SemanticsStopEvent:
          SemanticsStopEvent = other.SemanticsStopEvent;
          break;
        case TelemetryEventOneofCase.MeshingStartEvent:
          MeshingStartEvent = other.MeshingStartEvent;
          break;
        case TelemetryEventOneofCase.MeshingStopEvent:
          MeshingStopEvent = other.MeshingStopEvent;
          break;
        case TelemetryEventOneofCase.ObjectDetectionStartEvent:
          ObjectDetectionStartEvent = other.ObjectDetectionStartEvent;
          break;
        case TelemetryEventOneofCase.ObjectDetectionStopEvent:
          ObjectDetectionStopEvent = other.ObjectDetectionStopEvent;
          break;
        case TelemetryEventOneofCase.WpsStartEvent:
          WpsStartEvent = other.WpsStartEvent;
          break;
        case TelemetryEventOneofCase.WpsAvailableEvent:
          WpsAvailableEvent = other.WpsAvailableEvent;
          break;
        case TelemetryEventOneofCase.WpsStopEvent:
          WpsStopEvent = other.WpsStopEvent;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Niantic.Lightship.AR.Protobuf.InitializationEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.InitializationEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.InitializationEvent) {
              subBuilder.MergeFrom(InitializationEvent);
            }
            input.ReadMessage(subBuilder);
            InitializationEvent = subBuilder;
            break;
          }
          case 18: {
            global::Niantic.Lightship.AR.Protobuf.ScanRecorderStartEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.ScanRecorderStartEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.ScanRecorderStartEvent) {
              subBuilder.MergeFrom(ScanRecorderStartEvent);
            }
            input.ReadMessage(subBuilder);
            ScanRecorderStartEvent = subBuilder;
            break;
          }
          case 26: {
            global::Niantic.Lightship.AR.Protobuf.ScanRecorderStopEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.ScanRecorderStopEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.ScanRecorderStopEvent) {
              subBuilder.MergeFrom(ScanRecorderStopEvent);
            }
            input.ReadMessage(subBuilder);
            ScanRecorderStopEvent = subBuilder;
            break;
          }
          case 34: {
            global::Niantic.Lightship.AR.Protobuf.ScanSQCRunEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.ScanSQCRunEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.ScanSqcRunEvent) {
              subBuilder.MergeFrom(ScanSqcRunEvent);
            }
            input.ReadMessage(subBuilder);
            ScanSqcRunEvent = subBuilder;
            break;
          }
          case 42: {
            global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.ScanSqcDoneEvent) {
              subBuilder.MergeFrom(ScanSqcDoneEvent);
            }
            input.ReadMessage(subBuilder);
            ScanSqcDoneEvent = subBuilder;
            break;
          }
          case 50: {
            global::Niantic.Lightship.AR.Protobuf.ScanErrorEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.ScanErrorEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.ScanErrorEvent) {
              subBuilder.MergeFrom(ScanErrorEvent);
            }
            input.ReadMessage(subBuilder);
            ScanErrorEvent = subBuilder;
            break;
          }
          case 58: {
            global::Niantic.Lightship.AR.Protobuf.ScanArchiveBuilderGetNextChunkEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.ScanArchiveBuilderGetNextChunkEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.ScanArchiveBuilderGetNextChunkEvent) {
              subBuilder.MergeFrom(ScanArchiveBuilderGetNextChunkEvent);
            }
            input.ReadMessage(subBuilder);
            ScanArchiveBuilderGetNextChunkEvent = subBuilder;
            break;
          }
          case 66: {
            global::Niantic.Lightship.AR.Protobuf.ScanArchiveBuilderCancelEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.ScanArchiveBuilderCancelEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.ScanArchiveBuilderCancelEvent) {
              subBuilder.MergeFrom(ScanArchiveBuilderCancelEvent);
            }
            input.ReadMessage(subBuilder);
            ScanArchiveBuilderCancelEvent = subBuilder;
            break;
          }
          case 74: {
            global::Niantic.Lightship.AR.Protobuf.VpsLocalizationStartedEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.VpsLocalizationStartedEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.VpsLocalizationStartedEvent) {
              subBuilder.MergeFrom(VpsLocalizationStartedEvent);
            }
            input.ReadMessage(subBuilder);
            VpsLocalizationStartedEvent = subBuilder;
            break;
          }
          case 82: {
            global::Niantic.Lightship.AR.Protobuf.VpsLocalizationSuccessEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.VpsLocalizationSuccessEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.VpsLocalizationSuccessEvent) {
              subBuilder.MergeFrom(VpsLocalizationSuccessEvent);
            }
            input.ReadMessage(subBuilder);
            VpsLocalizationSuccessEvent = subBuilder;
            break;
          }
          case 90: {
            global::Niantic.Lightship.AR.Protobuf.VpsSessionEndedEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.VpsSessionEndedEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.VpsSessionEndedEvent) {
              subBuilder.MergeFrom(VpsSessionEndedEvent);
            }
            input.ReadMessage(subBuilder);
            VpsSessionEndedEvent = subBuilder;
            break;
          }
          case 98: {
            global::Niantic.Lightship.AR.Protobuf.ArSessionStartEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.ArSessionStartEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.ArSessionStartEvent) {
              subBuilder.MergeFrom(ArSessionStartEvent);
            }
            input.ReadMessage(subBuilder);
            ArSessionStartEvent = subBuilder;
            break;
          }
          case 106: {
            global::Niantic.Lightship.AR.Protobuf.DepthStartEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.DepthStartEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.DepthStartEvent) {
              subBuilder.MergeFrom(DepthStartEvent);
            }
            input.ReadMessage(subBuilder);
            DepthStartEvent = subBuilder;
            break;
          }
          case 114: {
            global::Niantic.Lightship.AR.Protobuf.DepthStopEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.DepthStopEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.DepthStopEvent) {
              subBuilder.MergeFrom(DepthStopEvent);
            }
            input.ReadMessage(subBuilder);
            DepthStopEvent = subBuilder;
            break;
          }
          case 122: {
            global::Niantic.Lightship.AR.Protobuf.SemanticsStartEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.SemanticsStartEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.SemanticsStartEvent) {
              subBuilder.MergeFrom(SemanticsStartEvent);
            }
            input.ReadMessage(subBuilder);
            SemanticsStartEvent = subBuilder;
            break;
          }
          case 130: {
            global::Niantic.Lightship.AR.Protobuf.SemanticsStopEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.SemanticsStopEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.SemanticsStopEvent) {
              subBuilder.MergeFrom(SemanticsStopEvent);
            }
            input.ReadMessage(subBuilder);
            SemanticsStopEvent = subBuilder;
            break;
          }
          case 138: {
            global::Niantic.Lightship.AR.Protobuf.MeshingStartEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.MeshingStartEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.MeshingStartEvent) {
              subBuilder.MergeFrom(MeshingStartEvent);
            }
            input.ReadMessage(subBuilder);
            MeshingStartEvent = subBuilder;
            break;
          }
          case 146: {
            global::Niantic.Lightship.AR.Protobuf.MeshingStopEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.MeshingStopEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.MeshingStopEvent) {
              subBuilder.MergeFrom(MeshingStopEvent);
            }
            input.ReadMessage(subBuilder);
            MeshingStopEvent = subBuilder;
            break;
          }
          case 154: {
            global::Niantic.Lightship.AR.Protobuf.ObjectDetectionStartEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.ObjectDetectionStartEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.ObjectDetectionStartEvent) {
              subBuilder.MergeFrom(ObjectDetectionStartEvent);
            }
            input.ReadMessage(subBuilder);
            ObjectDetectionStartEvent = subBuilder;
            break;
          }
          case 162: {
            global::Niantic.Lightship.AR.Protobuf.ObjectDetectionStopEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.ObjectDetectionStopEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.ObjectDetectionStopEvent) {
              subBuilder.MergeFrom(ObjectDetectionStopEvent);
            }
            input.ReadMessage(subBuilder);
            ObjectDetectionStopEvent = subBuilder;
            break;
          }
          case 170: {
            global::Niantic.Lightship.AR.Protobuf.WpsStartEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.WpsStartEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.WpsStartEvent) {
              subBuilder.MergeFrom(WpsStartEvent);
            }
            input.ReadMessage(subBuilder);
            WpsStartEvent = subBuilder;
            break;
          }
          case 178: {
            global::Niantic.Lightship.AR.Protobuf.WpsAvailableEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.WpsAvailableEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.WpsAvailableEvent) {
              subBuilder.MergeFrom(WpsAvailableEvent);
            }
            input.ReadMessage(subBuilder);
            WpsAvailableEvent = subBuilder;
            break;
          }
          case 186: {
            global::Niantic.Lightship.AR.Protobuf.WpsStopEvent subBuilder = new global::Niantic.Lightship.AR.Protobuf.WpsStopEvent();
            if (telemetryEventCase_ == TelemetryEventOneofCase.WpsStopEvent) {
              subBuilder.MergeFrom(WpsStopEvent);
            }
            input.ReadMessage(subBuilder);
            WpsStopEvent = subBuilder;
            break;
          }
          case 8002: {
            if (arCommonMetadata_ == null) {
              arCommonMetadata_ = new global::Niantic.ARDK.AR.Protobuf.ARCommonMetadata();
            }
            input.ReadMessage(arCommonMetadata_);
            break;
          }
          case 8010: {
            DeveloperKey = input.ReadString();
            break;
          }
          case 8016: {
            TimestampMs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Used to calculate DAUs and DADs. Also used to figure out the dev's processor (M1 vs Intel)
  ///  Usage: When a developer presses Play on Unity/App is launched on ios/android
  /// </summary>
  public sealed partial class InitializationEvent : pb::IMessage<InitializationEvent> {
    private static readonly pb::MessageParser<InitializationEvent> _parser = new pb::MessageParser<InitializationEvent>(() => new InitializationEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializationEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializationEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializationEvent(InitializationEvent other) : this() {
      installMode_ = other.installMode_;
      processor_ = other.processor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializationEvent Clone() {
      return new InitializationEvent(this);
    }

    /// <summary>Field number for the "install_mode" field.</summary>
    public const int InstallModeFieldNumber = 1;
    private string installMode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstallMode {
      get { return installMode_; }
      set {
        installMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "processor" field.</summary>
    public const int ProcessorFieldNumber = 2;
    private string processor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Processor {
      get { return processor_; }
      set {
        processor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializationEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializationEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstallMode != other.InstallMode) return false;
      if (Processor != other.Processor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstallMode.Length != 0) hash ^= InstallMode.GetHashCode();
      if (Processor.Length != 0) hash ^= Processor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstallMode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstallMode);
      }
      if (Processor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Processor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstallMode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstallMode);
      }
      if (Processor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Processor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializationEvent other) {
      if (other == null) {
        return;
      }
      if (other.InstallMode.Length != 0) {
        InstallMode = other.InstallMode;
      }
      if (other.Processor.Length != 0) {
        Processor = other.Processor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            InstallMode = input.ReadString();
            break;
          }
          case 18: {
            Processor = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VpsLocalizationStartedEvent : pb::IMessage<VpsLocalizationStartedEvent> {
    private static readonly pb::MessageParser<VpsLocalizationStartedEvent> _parser = new pb::MessageParser<VpsLocalizationStartedEvent>(() => new VpsLocalizationStartedEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VpsLocalizationStartedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VpsLocalizationStartedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VpsLocalizationStartedEvent(VpsLocalizationStartedEvent other) : this() {
      localizationTargetIds_ = other.localizationTargetIds_.Clone();
      vpsSessionId_ = other.vpsSessionId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VpsLocalizationStartedEvent Clone() {
      return new VpsLocalizationStartedEvent(this);
    }

    /// <summary>Field number for the "localization_target_ids" field.</summary>
    public const int LocalizationTargetIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_localizationTargetIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> localizationTargetIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  List of one or more target IDs that are being targeted for VPS loclization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LocalizationTargetIds {
      get { return localizationTargetIds_; }
    }

    /// <summary>Field number for the "vps_session_id" field.</summary>
    public const int VpsSessionIdFieldNumber = 2;
    private string vpsSessionId_ = "";
    /// <summary>
    ///  Same string that is sent to the VPS Server as the session id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VpsSessionId {
      get { return vpsSessionId_; }
      set {
        vpsSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VpsLocalizationStartedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VpsLocalizationStartedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!localizationTargetIds_.Equals(other.localizationTargetIds_)) return false;
      if (VpsSessionId != other.VpsSessionId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= localizationTargetIds_.GetHashCode();
      if (VpsSessionId.Length != 0) hash ^= VpsSessionId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      localizationTargetIds_.WriteTo(output, _repeated_localizationTargetIds_codec);
      if (VpsSessionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VpsSessionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += localizationTargetIds_.CalculateSize(_repeated_localizationTargetIds_codec);
      if (VpsSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VpsSessionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VpsLocalizationStartedEvent other) {
      if (other == null) {
        return;
      }
      localizationTargetIds_.Add(other.localizationTargetIds_);
      if (other.VpsSessionId.Length != 0) {
        VpsSessionId = other.VpsSessionId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            localizationTargetIds_.AddEntriesFrom(input, _repeated_localizationTargetIds_codec);
            break;
          }
          case 18: {
            VpsSessionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VpsLocalizationSuccessEvent : pb::IMessage<VpsLocalizationSuccessEvent> {
    private static readonly pb::MessageParser<VpsLocalizationSuccessEvent> _parser = new pb::MessageParser<VpsLocalizationSuccessEvent>(() => new VpsLocalizationSuccessEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VpsLocalizationSuccessEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VpsLocalizationSuccessEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VpsLocalizationSuccessEvent(VpsLocalizationSuccessEvent other) : this() {
      localizationTargetId_ = other.localizationTargetId_;
      vpsSessionId_ = other.vpsSessionId_;
      timeToLocalizeMs_ = other.timeToLocalizeMs_;
      numServerRequests_ = other.numServerRequests_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VpsLocalizationSuccessEvent Clone() {
      return new VpsLocalizationSuccessEvent(this);
    }

    /// <summary>Field number for the "localization_target_id" field.</summary>
    public const int LocalizationTargetIdFieldNumber = 1;
    private string localizationTargetId_ = "";
    /// <summary>
    ///  The localization target that was successfully localized for this event
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalizationTargetId {
      get { return localizationTargetId_; }
      set {
        localizationTargetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vps_session_id" field.</summary>
    public const int VpsSessionIdFieldNumber = 2;
    private string vpsSessionId_ = "";
    /// <summary>
    ///  Same string that is sent to the VPS Server as the session id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VpsSessionId {
      get { return vpsSessionId_; }
      set {
        vpsSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time_to_localize_ms" field.</summary>
    public const int TimeToLocalizeMsFieldNumber = 3;
    private long timeToLocalizeMs_;
    /// <summary>
    ///  Client E2E loop time between starting localization and localization success
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeToLocalizeMs {
      get { return timeToLocalizeMs_; }
      set {
        timeToLocalizeMs_ = value;
      }
    }

    /// <summary>Field number for the "num_server_requests" field.</summary>
    public const int NumServerRequestsFieldNumber = 4;
    private int numServerRequests_;
    /// <summary>
    ///  Total number of server requests sent before localization success
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumServerRequests {
      get { return numServerRequests_; }
      set {
        numServerRequests_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VpsLocalizationSuccessEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VpsLocalizationSuccessEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocalizationTargetId != other.LocalizationTargetId) return false;
      if (VpsSessionId != other.VpsSessionId) return false;
      if (TimeToLocalizeMs != other.TimeToLocalizeMs) return false;
      if (NumServerRequests != other.NumServerRequests) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocalizationTargetId.Length != 0) hash ^= LocalizationTargetId.GetHashCode();
      if (VpsSessionId.Length != 0) hash ^= VpsSessionId.GetHashCode();
      if (TimeToLocalizeMs != 0L) hash ^= TimeToLocalizeMs.GetHashCode();
      if (NumServerRequests != 0) hash ^= NumServerRequests.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LocalizationTargetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LocalizationTargetId);
      }
      if (VpsSessionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VpsSessionId);
      }
      if (TimeToLocalizeMs != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TimeToLocalizeMs);
      }
      if (NumServerRequests != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NumServerRequests);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocalizationTargetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalizationTargetId);
      }
      if (VpsSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VpsSessionId);
      }
      if (TimeToLocalizeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeToLocalizeMs);
      }
      if (NumServerRequests != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumServerRequests);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VpsLocalizationSuccessEvent other) {
      if (other == null) {
        return;
      }
      if (other.LocalizationTargetId.Length != 0) {
        LocalizationTargetId = other.LocalizationTargetId;
      }
      if (other.VpsSessionId.Length != 0) {
        VpsSessionId = other.VpsSessionId;
      }
      if (other.TimeToLocalizeMs != 0L) {
        TimeToLocalizeMs = other.TimeToLocalizeMs;
      }
      if (other.NumServerRequests != 0) {
        NumServerRequests = other.NumServerRequests;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LocalizationTargetId = input.ReadString();
            break;
          }
          case 18: {
            VpsSessionId = input.ReadString();
            break;
          }
          case 24: {
            TimeToLocalizeMs = input.ReadInt64();
            break;
          }
          case 32: {
            NumServerRequests = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VpsSessionEndedEvent : pb::IMessage<VpsSessionEndedEvent> {
    private static readonly pb::MessageParser<VpsSessionEndedEvent> _parser = new pb::MessageParser<VpsSessionEndedEvent>(() => new VpsSessionEndedEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VpsSessionEndedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VpsSessionEndedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VpsSessionEndedEvent(VpsSessionEndedEvent other) : this() {
      vpsSessionId_ = other.vpsSessionId_;
      numServerRequests_ = other.numServerRequests_;
      timeTrackedMs_ = other.timeTrackedMs_;
      totalSessionTimeMs_ = other.totalSessionTimeMs_;
      networkErrorCodes_ = other.networkErrorCodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VpsSessionEndedEvent Clone() {
      return new VpsSessionEndedEvent(this);
    }

    /// <summary>Field number for the "vps_session_id" field.</summary>
    public const int VpsSessionIdFieldNumber = 1;
    private string vpsSessionId_ = "";
    /// <summary>
    ///  Same string that is sent to the VPS Server as the session id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VpsSessionId {
      get { return vpsSessionId_; }
      set {
        vpsSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_server_requests" field.</summary>
    public const int NumServerRequestsFieldNumber = 2;
    private int numServerRequests_;
    /// <summary>
    ///  Total number of server requests sent in this session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumServerRequests {
      get { return numServerRequests_; }
      set {
        numServerRequests_ = value;
      }
    }

    /// <summary>Field number for the "time_tracked_ms" field.</summary>
    public const int TimeTrackedMsFieldNumber = 3;
    private long timeTrackedMs_;
    /// <summary>
    ///  Time spent in a Vps Tracked state (Localization Success + AR Tracking)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeTrackedMs {
      get { return timeTrackedMs_; }
      set {
        timeTrackedMs_ = value;
      }
    }

    /// <summary>Field number for the "total_session_time_ms" field.</summary>
    public const int TotalSessionTimeMsFieldNumber = 4;
    private long totalSessionTimeMs_;
    /// <summary>
    ///  Total time spent between session start and end
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSessionTimeMs {
      get { return totalSessionTimeMs_; }
      set {
        totalSessionTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "network_error_codes" field.</summary>
    public const int NetworkErrorCodesFieldNumber = 5;
    private static readonly pbc::MapField<string, int>.Codec _map_networkErrorCodes_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt32(16), 42);
    private readonly pbc::MapField<string, int> networkErrorCodes_ = new pbc::MapField<string, int>();
    /// <summary>
    ///  Report the count of all network message error codes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> NetworkErrorCodes {
      get { return networkErrorCodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VpsSessionEndedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VpsSessionEndedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VpsSessionId != other.VpsSessionId) return false;
      if (NumServerRequests != other.NumServerRequests) return false;
      if (TimeTrackedMs != other.TimeTrackedMs) return false;
      if (TotalSessionTimeMs != other.TotalSessionTimeMs) return false;
      if (!NetworkErrorCodes.Equals(other.NetworkErrorCodes)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VpsSessionId.Length != 0) hash ^= VpsSessionId.GetHashCode();
      if (NumServerRequests != 0) hash ^= NumServerRequests.GetHashCode();
      if (TimeTrackedMs != 0L) hash ^= TimeTrackedMs.GetHashCode();
      if (TotalSessionTimeMs != 0L) hash ^= TotalSessionTimeMs.GetHashCode();
      hash ^= NetworkErrorCodes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VpsSessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VpsSessionId);
      }
      if (NumServerRequests != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumServerRequests);
      }
      if (TimeTrackedMs != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TimeTrackedMs);
      }
      if (TotalSessionTimeMs != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalSessionTimeMs);
      }
      networkErrorCodes_.WriteTo(output, _map_networkErrorCodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VpsSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VpsSessionId);
      }
      if (NumServerRequests != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumServerRequests);
      }
      if (TimeTrackedMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeTrackedMs);
      }
      if (TotalSessionTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSessionTimeMs);
      }
      size += networkErrorCodes_.CalculateSize(_map_networkErrorCodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VpsSessionEndedEvent other) {
      if (other == null) {
        return;
      }
      if (other.VpsSessionId.Length != 0) {
        VpsSessionId = other.VpsSessionId;
      }
      if (other.NumServerRequests != 0) {
        NumServerRequests = other.NumServerRequests;
      }
      if (other.TimeTrackedMs != 0L) {
        TimeTrackedMs = other.TimeTrackedMs;
      }
      if (other.TotalSessionTimeMs != 0L) {
        TotalSessionTimeMs = other.TotalSessionTimeMs;
      }
      networkErrorCodes_.Add(other.networkErrorCodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VpsSessionId = input.ReadString();
            break;
          }
          case 16: {
            NumServerRequests = input.ReadInt32();
            break;
          }
          case 24: {
            TimeTrackedMs = input.ReadInt64();
            break;
          }
          case 32: {
            TotalSessionTimeMs = input.ReadInt64();
            break;
          }
          case 42: {
            networkErrorCodes_.AddEntriesFrom(input, _map_networkErrorCodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScanRecorderStartEvent : pb::IMessage<ScanRecorderStartEvent> {
    private static readonly pb::MessageParser<ScanRecorderStartEvent> _parser = new pb::MessageParser<ScanRecorderStartEvent>(() => new ScanRecorderStartEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScanRecorderStartEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanRecorderStartEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanRecorderStartEvent(ScanRecorderStartEvent other) : this() {
      scanId_ = other.scanId_;
      depthSource_ = other.depthSource_;
      framerate_ = other.framerate_;
      isVoxelEnabled_ = other.isVoxelEnabled_;
      isRaycastEnabled_ = other.isRaycastEnabled_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanRecorderStartEvent Clone() {
      return new ScanRecorderStartEvent(this);
    }

    /// <summary>Field number for the "scan_id" field.</summary>
    public const int ScanIdFieldNumber = 1;
    private string scanId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScanId {
      get { return scanId_; }
      set {
        scanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "depth_source" field.</summary>
    public const int DepthSourceFieldNumber = 2;
    private global::Niantic.Lightship.AR.Protobuf.ScanRecorderStartEvent.Types.DepthSource depthSource_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.ScanRecorderStartEvent.Types.DepthSource DepthSource {
      get { return depthSource_; }
      set {
        depthSource_ = value;
      }
    }

    /// <summary>Field number for the "framerate" field.</summary>
    public const int FramerateFieldNumber = 3;
    private uint framerate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Framerate {
      get { return framerate_; }
      set {
        framerate_ = value;
      }
    }

    /// <summary>Field number for the "is_voxel_enabled" field.</summary>
    public const int IsVoxelEnabledFieldNumber = 4;
    private bool isVoxelEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVoxelEnabled {
      get { return isVoxelEnabled_; }
      set {
        isVoxelEnabled_ = value;
      }
    }

    /// <summary>Field number for the "is_raycast_enabled" field.</summary>
    public const int IsRaycastEnabledFieldNumber = 5;
    private bool isRaycastEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRaycastEnabled {
      get { return isRaycastEnabled_; }
      set {
        isRaycastEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScanRecorderStartEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScanRecorderStartEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScanId != other.ScanId) return false;
      if (DepthSource != other.DepthSource) return false;
      if (Framerate != other.Framerate) return false;
      if (IsVoxelEnabled != other.IsVoxelEnabled) return false;
      if (IsRaycastEnabled != other.IsRaycastEnabled) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScanId.Length != 0) hash ^= ScanId.GetHashCode();
      if (DepthSource != 0) hash ^= DepthSource.GetHashCode();
      if (Framerate != 0) hash ^= Framerate.GetHashCode();
      if (IsVoxelEnabled != false) hash ^= IsVoxelEnabled.GetHashCode();
      if (IsRaycastEnabled != false) hash ^= IsRaycastEnabled.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScanId);
      }
      if (DepthSource != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DepthSource);
      }
      if (Framerate != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Framerate);
      }
      if (IsVoxelEnabled != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsVoxelEnabled);
      }
      if (IsRaycastEnabled != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsRaycastEnabled);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScanId);
      }
      if (DepthSource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DepthSource);
      }
      if (Framerate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Framerate);
      }
      if (IsVoxelEnabled != false) {
        size += 1 + 1;
      }
      if (IsRaycastEnabled != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScanRecorderStartEvent other) {
      if (other == null) {
        return;
      }
      if (other.ScanId.Length != 0) {
        ScanId = other.ScanId;
      }
      if (other.DepthSource != 0) {
        DepthSource = other.DepthSource;
      }
      if (other.Framerate != 0) {
        Framerate = other.Framerate;
      }
      if (other.IsVoxelEnabled != false) {
        IsVoxelEnabled = other.IsVoxelEnabled;
      }
      if (other.IsRaycastEnabled != false) {
        IsRaycastEnabled = other.IsRaycastEnabled;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ScanId = input.ReadString();
            break;
          }
          case 16: {
            depthSource_ = (global::Niantic.Lightship.AR.Protobuf.ScanRecorderStartEvent.Types.DepthSource) input.ReadEnum();
            break;
          }
          case 24: {
            Framerate = input.ReadUInt32();
            break;
          }
          case 32: {
            IsVoxelEnabled = input.ReadBool();
            break;
          }
          case 40: {
            IsRaycastEnabled = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ScanRecorderStartEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DepthSource {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("LIDAR")] Lidar = 1,
        [pbr::OriginalName("MULTIDEPTH")] Multidepth = 2,
        [pbr::OriginalName("NO_DEPTH")] NoDepth = 3,
      }

    }
    #endregion

  }

  public sealed partial class ScanRecorderStopEvent : pb::IMessage<ScanRecorderStopEvent> {
    private static readonly pb::MessageParser<ScanRecorderStopEvent> _parser = new pb::MessageParser<ScanRecorderStopEvent>(() => new ScanRecorderStopEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScanRecorderStopEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanRecorderStopEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanRecorderStopEvent(ScanRecorderStopEvent other) : this() {
      scanId_ = other.scanId_;
      operation_ = other.operation_;
      scanDurationMs_ = other.scanDurationMs_;
      numerOfFramesInScan_ = other.numerOfFramesInScan_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanRecorderStopEvent Clone() {
      return new ScanRecorderStopEvent(this);
    }

    /// <summary>Field number for the "scan_id" field.</summary>
    public const int ScanIdFieldNumber = 1;
    private string scanId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScanId {
      get { return scanId_; }
      set {
        scanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 2;
    private global::Niantic.Lightship.AR.Protobuf.ScanRecorderStopEvent.Types.Operation operation_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.ScanRecorderStopEvent.Types.Operation Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    /// <summary>Field number for the "scan_duration_ms" field.</summary>
    public const int ScanDurationMsFieldNumber = 3;
    private uint scanDurationMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScanDurationMs {
      get { return scanDurationMs_; }
      set {
        scanDurationMs_ = value;
      }
    }

    /// <summary>Field number for the "numer_of_frames_in_scan" field.</summary>
    public const int NumerOfFramesInScanFieldNumber = 4;
    private uint numerOfFramesInScan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumerOfFramesInScan {
      get { return numerOfFramesInScan_; }
      set {
        numerOfFramesInScan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScanRecorderStopEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScanRecorderStopEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScanId != other.ScanId) return false;
      if (Operation != other.Operation) return false;
      if (ScanDurationMs != other.ScanDurationMs) return false;
      if (NumerOfFramesInScan != other.NumerOfFramesInScan) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScanId.Length != 0) hash ^= ScanId.GetHashCode();
      if (Operation != 0) hash ^= Operation.GetHashCode();
      if (ScanDurationMs != 0) hash ^= ScanDurationMs.GetHashCode();
      if (NumerOfFramesInScan != 0) hash ^= NumerOfFramesInScan.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScanId);
      }
      if (Operation != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Operation);
      }
      if (ScanDurationMs != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ScanDurationMs);
      }
      if (NumerOfFramesInScan != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumerOfFramesInScan);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScanId);
      }
      if (Operation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operation);
      }
      if (ScanDurationMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScanDurationMs);
      }
      if (NumerOfFramesInScan != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumerOfFramesInScan);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScanRecorderStopEvent other) {
      if (other == null) {
        return;
      }
      if (other.ScanId.Length != 0) {
        ScanId = other.ScanId;
      }
      if (other.Operation != 0) {
        Operation = other.Operation;
      }
      if (other.ScanDurationMs != 0) {
        ScanDurationMs = other.ScanDurationMs;
      }
      if (other.NumerOfFramesInScan != 0) {
        NumerOfFramesInScan = other.NumerOfFramesInScan;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ScanId = input.ReadString();
            break;
          }
          case 16: {
            operation_ = (global::Niantic.Lightship.AR.Protobuf.ScanRecorderStopEvent.Types.Operation) input.ReadEnum();
            break;
          }
          case 24: {
            ScanDurationMs = input.ReadUInt32();
            break;
          }
          case 32: {
            NumerOfFramesInScan = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ScanRecorderStopEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Operation {
        [pbr::OriginalName("SAVE")] Save = 0,
        [pbr::OriginalName("DISCARD")] Discard = 1,
      }

    }
    #endregion

  }

  public sealed partial class ScanSQCRunEvent : pb::IMessage<ScanSQCRunEvent> {
    private static readonly pb::MessageParser<ScanSQCRunEvent> _parser = new pb::MessageParser<ScanSQCRunEvent>(() => new ScanSQCRunEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScanSQCRunEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanSQCRunEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanSQCRunEvent(ScanSQCRunEvent other) : this() {
      scanId_ = other.scanId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanSQCRunEvent Clone() {
      return new ScanSQCRunEvent(this);
    }

    /// <summary>Field number for the "scan_id" field.</summary>
    public const int ScanIdFieldNumber = 1;
    private string scanId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScanId {
      get { return scanId_; }
      set {
        scanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScanSQCRunEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScanSQCRunEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScanId != other.ScanId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScanId.Length != 0) hash ^= ScanId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScanId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScanId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScanSQCRunEvent other) {
      if (other == null) {
        return;
      }
      if (other.ScanId.Length != 0) {
        ScanId = other.ScanId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ScanId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScanSQCDoneEvent : pb::IMessage<ScanSQCDoneEvent> {
    private static readonly pb::MessageParser<ScanSQCDoneEvent> _parser = new pb::MessageParser<ScanSQCDoneEvent>(() => new ScanSQCDoneEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScanSQCDoneEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanSQCDoneEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanSQCDoneEvent(ScanSQCDoneEvent other) : this() {
      scanId_ = other.scanId_;
      overallScore_ = other.overallScore_;
      timeElapseMs_ = other.timeElapseMs_;
      failedReasons_ = other.failedReasons_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanSQCDoneEvent Clone() {
      return new ScanSQCDoneEvent(this);
    }

    /// <summary>Field number for the "scan_id" field.</summary>
    public const int ScanIdFieldNumber = 1;
    private string scanId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScanId {
      get { return scanId_; }
      set {
        scanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "overall_score" field.</summary>
    public const int OverallScoreFieldNumber = 2;
    private float overallScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OverallScore {
      get { return overallScore_; }
      set {
        overallScore_ = value;
      }
    }

    /// <summary>Field number for the "time_elapse_ms" field.</summary>
    public const int TimeElapseMsFieldNumber = 3;
    private uint timeElapseMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeElapseMs {
      get { return timeElapseMs_; }
      set {
        timeElapseMs_ = value;
      }
    }

    /// <summary>Field number for the "failed_reasons" field.</summary>
    public const int FailedReasonsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent.Types.ScanSQCFailedReason> _repeated_failedReasons_codec
        = pb::FieldCodec.ForMessage(34, global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent.Types.ScanSQCFailedReason.Parser);
    private readonly pbc::RepeatedField<global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent.Types.ScanSQCFailedReason> failedReasons_ = new pbc::RepeatedField<global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent.Types.ScanSQCFailedReason>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent.Types.ScanSQCFailedReason> FailedReasons {
      get { return failedReasons_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScanSQCDoneEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScanSQCDoneEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScanId != other.ScanId) return false;
      if (OverallScore != other.OverallScore) return false;
      if (TimeElapseMs != other.TimeElapseMs) return false;
      if(!failedReasons_.Equals(other.failedReasons_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScanId.Length != 0) hash ^= ScanId.GetHashCode();
      if (OverallScore != 0F) hash ^= OverallScore.GetHashCode();
      if (TimeElapseMs != 0) hash ^= TimeElapseMs.GetHashCode();
      hash ^= failedReasons_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScanId);
      }
      if (OverallScore != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(OverallScore);
      }
      if (TimeElapseMs != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TimeElapseMs);
      }
      failedReasons_.WriteTo(output, _repeated_failedReasons_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScanId);
      }
      if (OverallScore != 0F) {
        size += 1 + 4;
      }
      if (TimeElapseMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeElapseMs);
      }
      size += failedReasons_.CalculateSize(_repeated_failedReasons_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScanSQCDoneEvent other) {
      if (other == null) {
        return;
      }
      if (other.ScanId.Length != 0) {
        ScanId = other.ScanId;
      }
      if (other.OverallScore != 0F) {
        OverallScore = other.OverallScore;
      }
      if (other.TimeElapseMs != 0) {
        TimeElapseMs = other.TimeElapseMs;
      }
      failedReasons_.Add(other.failedReasons_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ScanId = input.ReadString();
            break;
          }
          case 21: {
            OverallScore = input.ReadFloat();
            break;
          }
          case 24: {
            TimeElapseMs = input.ReadUInt32();
            break;
          }
          case 34: {
            failedReasons_.AddEntriesFrom(input, _repeated_failedReasons_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ScanSQCDoneEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ScanSQCFailedReason : pb::IMessage<ScanSQCFailedReason> {
        private static readonly pb::MessageParser<ScanSQCFailedReason> _parser = new pb::MessageParser<ScanSQCFailedReason>(() => new ScanSQCFailedReason());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ScanSQCFailedReason> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ScanSQCFailedReason() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ScanSQCFailedReason(ScanSQCFailedReason other) : this() {
          failedReason_ = other.failedReason_;
          score_ = other.score_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ScanSQCFailedReason Clone() {
          return new ScanSQCFailedReason(this);
        }

        /// <summary>Field number for the "failed_reason" field.</summary>
        public const int FailedReasonFieldNumber = 1;
        private global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent.Types.ScanSQCFailedReason.Types.FailedReason failedReason_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent.Types.ScanSQCFailedReason.Types.FailedReason FailedReason {
          get { return failedReason_; }
          set {
            failedReason_ = value;
          }
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 2;
        private float score_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Score {
          get { return score_; }
          set {
            score_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ScanSQCFailedReason);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ScanSQCFailedReason other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FailedReason != other.FailedReason) return false;
          if (Score != other.Score) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FailedReason != 0) hash ^= FailedReason.GetHashCode();
          if (Score != 0F) hash ^= Score.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FailedReason != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) FailedReason);
          }
          if (Score != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Score);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FailedReason != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailedReason);
          }
          if (Score != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ScanSQCFailedReason other) {
          if (other == null) {
            return;
          }
          if (other.FailedReason != 0) {
            FailedReason = other.FailedReason;
          }
          if (other.Score != 0F) {
            Score = other.Score;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                failedReason_ = (global::Niantic.Lightship.AR.Protobuf.ScanSQCDoneEvent.Types.ScanSQCFailedReason.Types.FailedReason) input.ReadEnum();
                break;
              }
              case 21: {
                Score = input.ReadFloat();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ScanSQCFailedReason message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum FailedReason {
            [pbr::OriginalName("BLURRY")] Blurry = 0,
            [pbr::OriginalName("DARDK")] Dardk = 1,
            [pbr::OriginalName("BAD_QUALITY")] BadQuality = 2,
            [pbr::OriginalName("GROUND_OR_FEET")] GroundOrFeet = 3,
            [pbr::OriginalName("INDOOR_UNCLEAR")] IndoorUnclear = 4,
            [pbr::OriginalName("FROM_CAR")] FromCar = 5,
            [pbr::OriginalName("OBSTRUCTED")] Obstructed = 6,
            [pbr::OriginalName("TARGET_NOT_VISIBLE")] TargetNotVisible = 7,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class ScanErrorEvent : pb::IMessage<ScanErrorEvent> {
    private static readonly pb::MessageParser<ScanErrorEvent> _parser = new pb::MessageParser<ScanErrorEvent>(() => new ScanErrorEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScanErrorEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanErrorEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanErrorEvent(ScanErrorEvent other) : this() {
      scanId_ = other.scanId_;
      errorCode_ = other.errorCode_;
      errorMessage_ = other.errorMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanErrorEvent Clone() {
      return new ScanErrorEvent(this);
    }

    /// <summary>Field number for the "scan_id" field.</summary>
    public const int ScanIdFieldNumber = 1;
    private string scanId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScanId {
      get { return scanId_; }
      set {
        scanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 2;
    private global::Niantic.Lightship.AR.Protobuf.ScanErrorEvent.Types.Error errorCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Niantic.Lightship.AR.Protobuf.ScanErrorEvent.Types.Error ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 3;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScanErrorEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScanErrorEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScanId != other.ScanId) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScanId.Length != 0) hash ^= ScanId.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScanId);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ErrorCode);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrorMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScanId);
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScanErrorEvent other) {
      if (other == null) {
        return;
      }
      if (other.ScanId.Length != 0) {
        ScanId = other.ScanId;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ScanId = input.ReadString();
            break;
          }
          case 16: {
            errorCode_ = (global::Niantic.Lightship.AR.Protobuf.ScanErrorEvent.Types.Error) input.ReadEnum();
            break;
          }
          case 26: {
            ErrorMessage = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ScanErrorEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Error {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("SQC_NOT_READY")] SqcNotReady = 1,
        [pbr::OriginalName("SQC_BAD_INPUT")] SqcBadInput = 2,
        [pbr::OriginalName("SQC_BAD_MODEL")] SqcBadModel = 3,
        [pbr::OriginalName("SQC_MODEL_READ_FAIL")] SqcModelReadFail = 4,
        [pbr::OriginalName("SQC_DECRYPT_FAIL")] SqcDecryptFail = 5,
        [pbr::OriginalName("SQC_UNPACK_FAIL")] SqcUnpackFail = 6,
        [pbr::OriginalName("SQC_NO_INPUT_FRAMES")] SqcNoInputFrames = 7,
        /// <summary>
        ///  TODO(sxian): extend the error code.
        /// </summary>
        [pbr::OriginalName("SQC_INTERRUPTED")] SqcInterrupted = 8,
      }

    }
    #endregion

  }

  public sealed partial class ScanArchiveBuilderGetNextChunkEvent : pb::IMessage<ScanArchiveBuilderGetNextChunkEvent> {
    private static readonly pb::MessageParser<ScanArchiveBuilderGetNextChunkEvent> _parser = new pb::MessageParser<ScanArchiveBuilderGetNextChunkEvent>(() => new ScanArchiveBuilderGetNextChunkEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScanArchiveBuilderGetNextChunkEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanArchiveBuilderGetNextChunkEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanArchiveBuilderGetNextChunkEvent(ScanArchiveBuilderGetNextChunkEvent other) : this() {
      scanId_ = other.scanId_;
      chunkFileSizeInBytes_ = other.chunkFileSizeInBytes_;
      chunkId_ = other.chunkId_;
      timeElapseMs_ = other.timeElapseMs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanArchiveBuilderGetNextChunkEvent Clone() {
      return new ScanArchiveBuilderGetNextChunkEvent(this);
    }

    /// <summary>Field number for the "scan_id" field.</summary>
    public const int ScanIdFieldNumber = 1;
    private string scanId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScanId {
      get { return scanId_; }
      set {
        scanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chunk_file_size_in_bytes" field.</summary>
    public const int ChunkFileSizeInBytesFieldNumber = 2;
    private ulong chunkFileSizeInBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChunkFileSizeInBytes {
      get { return chunkFileSizeInBytes_; }
      set {
        chunkFileSizeInBytes_ = value;
      }
    }

    /// <summary>Field number for the "chunk_id" field.</summary>
    public const int ChunkIdFieldNumber = 3;
    private uint chunkId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChunkId {
      get { return chunkId_; }
      set {
        chunkId_ = value;
      }
    }

    /// <summary>Field number for the "time_elapse_ms" field.</summary>
    public const int TimeElapseMsFieldNumber = 4;
    private uint timeElapseMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeElapseMs {
      get { return timeElapseMs_; }
      set {
        timeElapseMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScanArchiveBuilderGetNextChunkEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScanArchiveBuilderGetNextChunkEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScanId != other.ScanId) return false;
      if (ChunkFileSizeInBytes != other.ChunkFileSizeInBytes) return false;
      if (ChunkId != other.ChunkId) return false;
      if (TimeElapseMs != other.TimeElapseMs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScanId.Length != 0) hash ^= ScanId.GetHashCode();
      if (ChunkFileSizeInBytes != 0UL) hash ^= ChunkFileSizeInBytes.GetHashCode();
      if (ChunkId != 0) hash ^= ChunkId.GetHashCode();
      if (TimeElapseMs != 0) hash ^= TimeElapseMs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScanId);
      }
      if (ChunkFileSizeInBytes != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ChunkFileSizeInBytes);
      }
      if (ChunkId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChunkId);
      }
      if (TimeElapseMs != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TimeElapseMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScanId);
      }
      if (ChunkFileSizeInBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChunkFileSizeInBytes);
      }
      if (ChunkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunkId);
      }
      if (TimeElapseMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeElapseMs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScanArchiveBuilderGetNextChunkEvent other) {
      if (other == null) {
        return;
      }
      if (other.ScanId.Length != 0) {
        ScanId = other.ScanId;
      }
      if (other.ChunkFileSizeInBytes != 0UL) {
        ChunkFileSizeInBytes = other.ChunkFileSizeInBytes;
      }
      if (other.ChunkId != 0) {
        ChunkId = other.ChunkId;
      }
      if (other.TimeElapseMs != 0) {
        TimeElapseMs = other.TimeElapseMs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ScanId = input.ReadString();
            break;
          }
          case 16: {
            ChunkFileSizeInBytes = input.ReadUInt64();
            break;
          }
          case 24: {
            ChunkId = input.ReadUInt32();
            break;
          }
          case 32: {
            TimeElapseMs = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScanArchiveBuilderCancelEvent : pb::IMessage<ScanArchiveBuilderCancelEvent> {
    private static readonly pb::MessageParser<ScanArchiveBuilderCancelEvent> _parser = new pb::MessageParser<ScanArchiveBuilderCancelEvent>(() => new ScanArchiveBuilderCancelEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScanArchiveBuilderCancelEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanArchiveBuilderCancelEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanArchiveBuilderCancelEvent(ScanArchiveBuilderCancelEvent other) : this() {
      scanId_ = other.scanId_;
      chunkId_ = other.chunkId_;
      timeElapseMs_ = other.timeElapseMs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanArchiveBuilderCancelEvent Clone() {
      return new ScanArchiveBuilderCancelEvent(this);
    }

    /// <summary>Field number for the "scan_id" field.</summary>
    public const int ScanIdFieldNumber = 1;
    private string scanId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScanId {
      get { return scanId_; }
      set {
        scanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chunk_id" field.</summary>
    public const int ChunkIdFieldNumber = 2;
    private uint chunkId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChunkId {
      get { return chunkId_; }
      set {
        chunkId_ = value;
      }
    }

    /// <summary>Field number for the "time_elapse_ms" field.</summary>
    public const int TimeElapseMsFieldNumber = 3;
    private uint timeElapseMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeElapseMs {
      get { return timeElapseMs_; }
      set {
        timeElapseMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScanArchiveBuilderCancelEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScanArchiveBuilderCancelEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScanId != other.ScanId) return false;
      if (ChunkId != other.ChunkId) return false;
      if (TimeElapseMs != other.TimeElapseMs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScanId.Length != 0) hash ^= ScanId.GetHashCode();
      if (ChunkId != 0) hash ^= ChunkId.GetHashCode();
      if (TimeElapseMs != 0) hash ^= TimeElapseMs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScanId);
      }
      if (ChunkId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChunkId);
      }
      if (TimeElapseMs != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TimeElapseMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScanId);
      }
      if (ChunkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunkId);
      }
      if (TimeElapseMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeElapseMs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScanArchiveBuilderCancelEvent other) {
      if (other == null) {
        return;
      }
      if (other.ScanId.Length != 0) {
        ScanId = other.ScanId;
      }
      if (other.ChunkId != 0) {
        ChunkId = other.ChunkId;
      }
      if (other.TimeElapseMs != 0) {
        TimeElapseMs = other.TimeElapseMs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ScanId = input.ReadString();
            break;
          }
          case 16: {
            ChunkId = input.ReadUInt32();
            break;
          }
          case 24: {
            TimeElapseMs = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Usage: To Get the ARSessionCount.
  ///  Yes. It is intended to be empty. We do not need more info here.
  /// </summary>
  public sealed partial class ArSessionStartEvent : pb::IMessage<ArSessionStartEvent> {
    private static readonly pb::MessageParser<ArSessionStartEvent> _parser = new pb::MessageParser<ArSessionStartEvent>(() => new ArSessionStartEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArSessionStartEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArSessionStartEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArSessionStartEvent(ArSessionStartEvent other) : this() {
      emptyField_ = other.emptyField_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArSessionStartEvent Clone() {
      return new ArSessionStartEvent(this);
    }

    /// <summary>Field number for the "empty_field" field.</summary>
    public const int EmptyFieldFieldNumber = 99;
    private bool emptyField_;
    /// <summary>
    ///  Dummy payload to prevent empty messages from being omitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EmptyField {
      get { return emptyField_; }
      set {
        emptyField_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArSessionStartEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArSessionStartEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EmptyField != other.EmptyField) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EmptyField != false) hash ^= EmptyField.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EmptyField != false) {
        output.WriteRawTag(152, 6);
        output.WriteBool(EmptyField);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EmptyField != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArSessionStartEvent other) {
      if (other == null) {
        return;
      }
      if (other.EmptyField != false) {
        EmptyField = other.EmptyField;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 792: {
            EmptyField = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DepthStartEvent : pb::IMessage<DepthStartEvent> {
    private static readonly pb::MessageParser<DepthStartEvent> _parser = new pb::MessageParser<DepthStartEvent>(() => new DepthStartEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepthStartEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthStartEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthStartEvent(DepthStartEvent other) : this() {
      emptyField_ = other.emptyField_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthStartEvent Clone() {
      return new DepthStartEvent(this);
    }

    /// <summary>Field number for the "empty_field" field.</summary>
    public const int EmptyFieldFieldNumber = 99;
    private bool emptyField_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EmptyField {
      get { return emptyField_; }
      set {
        emptyField_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepthStartEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepthStartEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EmptyField != other.EmptyField) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EmptyField != false) hash ^= EmptyField.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EmptyField != false) {
        output.WriteRawTag(152, 6);
        output.WriteBool(EmptyField);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EmptyField != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepthStartEvent other) {
      if (other == null) {
        return;
      }
      if (other.EmptyField != false) {
        EmptyField = other.EmptyField;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 792: {
            EmptyField = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DepthStopEvent : pb::IMessage<DepthStopEvent> {
    private static readonly pb::MessageParser<DepthStopEvent> _parser = new pb::MessageParser<DepthStopEvent>(() => new DepthStopEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepthStopEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthStopEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthStopEvent(DepthStopEvent other) : this() {
      timeElapsedMs_ = other.timeElapsedMs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthStopEvent Clone() {
      return new DepthStopEvent(this);
    }

    /// <summary>Field number for the "time_elapsed_ms" field.</summary>
    public const int TimeElapsedMsFieldNumber = 1;
    private uint timeElapsedMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeElapsedMs {
      get { return timeElapsedMs_; }
      set {
        timeElapsedMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepthStopEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepthStopEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeElapsedMs != other.TimeElapsedMs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeElapsedMs != 0) hash ^= TimeElapsedMs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeElapsedMs != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TimeElapsedMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeElapsedMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeElapsedMs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepthStopEvent other) {
      if (other == null) {
        return;
      }
      if (other.TimeElapsedMs != 0) {
        TimeElapsedMs = other.TimeElapsedMs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeElapsedMs = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SemanticsStartEvent : pb::IMessage<SemanticsStartEvent> {
    private static readonly pb::MessageParser<SemanticsStartEvent> _parser = new pb::MessageParser<SemanticsStartEvent>(() => new SemanticsStartEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SemanticsStartEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SemanticsStartEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SemanticsStartEvent(SemanticsStartEvent other) : this() {
      emptyField_ = other.emptyField_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SemanticsStartEvent Clone() {
      return new SemanticsStartEvent(this);
    }

    /// <summary>Field number for the "empty_field" field.</summary>
    public const int EmptyFieldFieldNumber = 99;
    private bool emptyField_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EmptyField {
      get { return emptyField_; }
      set {
        emptyField_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SemanticsStartEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SemanticsStartEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EmptyField != other.EmptyField) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EmptyField != false) hash ^= EmptyField.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EmptyField != false) {
        output.WriteRawTag(152, 6);
        output.WriteBool(EmptyField);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EmptyField != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SemanticsStartEvent other) {
      if (other == null) {
        return;
      }
      if (other.EmptyField != false) {
        EmptyField = other.EmptyField;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 792: {
            EmptyField = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SemanticsStopEvent : pb::IMessage<SemanticsStopEvent> {
    private static readonly pb::MessageParser<SemanticsStopEvent> _parser = new pb::MessageParser<SemanticsStopEvent>(() => new SemanticsStopEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SemanticsStopEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SemanticsStopEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SemanticsStopEvent(SemanticsStopEvent other) : this() {
      timeElapsedMs_ = other.timeElapsedMs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SemanticsStopEvent Clone() {
      return new SemanticsStopEvent(this);
    }

    /// <summary>Field number for the "time_elapsed_ms" field.</summary>
    public const int TimeElapsedMsFieldNumber = 1;
    private uint timeElapsedMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeElapsedMs {
      get { return timeElapsedMs_; }
      set {
        timeElapsedMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SemanticsStopEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SemanticsStopEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeElapsedMs != other.TimeElapsedMs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeElapsedMs != 0) hash ^= TimeElapsedMs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeElapsedMs != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TimeElapsedMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeElapsedMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeElapsedMs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SemanticsStopEvent other) {
      if (other == null) {
        return;
      }
      if (other.TimeElapsedMs != 0) {
        TimeElapsedMs = other.TimeElapsedMs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeElapsedMs = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MeshingStartEvent : pb::IMessage<MeshingStartEvent> {
    private static readonly pb::MessageParser<MeshingStartEvent> _parser = new pb::MessageParser<MeshingStartEvent>(() => new MeshingStartEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MeshingStartEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeshingStartEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeshingStartEvent(MeshingStartEvent other) : this() {
      emptyField_ = other.emptyField_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeshingStartEvent Clone() {
      return new MeshingStartEvent(this);
    }

    /// <summary>Field number for the "empty_field" field.</summary>
    public const int EmptyFieldFieldNumber = 99;
    private bool emptyField_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EmptyField {
      get { return emptyField_; }
      set {
        emptyField_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MeshingStartEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MeshingStartEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EmptyField != other.EmptyField) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EmptyField != false) hash ^= EmptyField.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EmptyField != false) {
        output.WriteRawTag(152, 6);
        output.WriteBool(EmptyField);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EmptyField != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MeshingStartEvent other) {
      if (other == null) {
        return;
      }
      if (other.EmptyField != false) {
        EmptyField = other.EmptyField;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 792: {
            EmptyField = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MeshingStopEvent : pb::IMessage<MeshingStopEvent> {
    private static readonly pb::MessageParser<MeshingStopEvent> _parser = new pb::MessageParser<MeshingStopEvent>(() => new MeshingStopEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MeshingStopEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeshingStopEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeshingStopEvent(MeshingStopEvent other) : this() {
      timeElapsedMs_ = other.timeElapsedMs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeshingStopEvent Clone() {
      return new MeshingStopEvent(this);
    }

    /// <summary>Field number for the "time_elapsed_ms" field.</summary>
    public const int TimeElapsedMsFieldNumber = 1;
    private uint timeElapsedMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeElapsedMs {
      get { return timeElapsedMs_; }
      set {
        timeElapsedMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MeshingStopEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MeshingStopEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeElapsedMs != other.TimeElapsedMs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeElapsedMs != 0) hash ^= TimeElapsedMs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeElapsedMs != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TimeElapsedMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeElapsedMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeElapsedMs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MeshingStopEvent other) {
      if (other == null) {
        return;
      }
      if (other.TimeElapsedMs != 0) {
        TimeElapsedMs = other.TimeElapsedMs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeElapsedMs = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectDetectionStartEvent : pb::IMessage<ObjectDetectionStartEvent> {
    private static readonly pb::MessageParser<ObjectDetectionStartEvent> _parser = new pb::MessageParser<ObjectDetectionStartEvent>(() => new ObjectDetectionStartEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectDetectionStartEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDetectionStartEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDetectionStartEvent(ObjectDetectionStartEvent other) : this() {
      emptyField_ = other.emptyField_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDetectionStartEvent Clone() {
      return new ObjectDetectionStartEvent(this);
    }

    /// <summary>Field number for the "empty_field" field.</summary>
    public const int EmptyFieldFieldNumber = 99;
    private bool emptyField_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EmptyField {
      get { return emptyField_; }
      set {
        emptyField_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectDetectionStartEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectDetectionStartEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EmptyField != other.EmptyField) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EmptyField != false) hash ^= EmptyField.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EmptyField != false) {
        output.WriteRawTag(152, 6);
        output.WriteBool(EmptyField);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EmptyField != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectDetectionStartEvent other) {
      if (other == null) {
        return;
      }
      if (other.EmptyField != false) {
        EmptyField = other.EmptyField;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 792: {
            EmptyField = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectDetectionStopEvent : pb::IMessage<ObjectDetectionStopEvent> {
    private static readonly pb::MessageParser<ObjectDetectionStopEvent> _parser = new pb::MessageParser<ObjectDetectionStopEvent>(() => new ObjectDetectionStopEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectDetectionStopEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDetectionStopEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDetectionStopEvent(ObjectDetectionStopEvent other) : this() {
      timeElapsedMs_ = other.timeElapsedMs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDetectionStopEvent Clone() {
      return new ObjectDetectionStopEvent(this);
    }

    /// <summary>Field number for the "time_elapsed_ms" field.</summary>
    public const int TimeElapsedMsFieldNumber = 1;
    private uint timeElapsedMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeElapsedMs {
      get { return timeElapsedMs_; }
      set {
        timeElapsedMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectDetectionStopEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectDetectionStopEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeElapsedMs != other.TimeElapsedMs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeElapsedMs != 0) hash ^= TimeElapsedMs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeElapsedMs != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TimeElapsedMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeElapsedMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeElapsedMs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectDetectionStopEvent other) {
      if (other == null) {
        return;
      }
      if (other.TimeElapsedMs != 0) {
        TimeElapsedMs = other.TimeElapsedMs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeElapsedMs = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WpsStartEvent : pb::IMessage<WpsStartEvent> {
    private static readonly pb::MessageParser<WpsStartEvent> _parser = new pb::MessageParser<WpsStartEvent>(() => new WpsStartEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WpsStartEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WpsStartEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WpsStartEvent(WpsStartEvent other) : this() {
      wpsSessionId_ = other.wpsSessionId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WpsStartEvent Clone() {
      return new WpsStartEvent(this);
    }

    /// <summary>Field number for the "wps_session_id" field.</summary>
    public const int WpsSessionIdFieldNumber = 1;
    private string wpsSessionId_ = "";
    /// <summary>
    ///  Unique ID for the WPS session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WpsSessionId {
      get { return wpsSessionId_; }
      set {
        wpsSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WpsStartEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WpsStartEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WpsSessionId != other.WpsSessionId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WpsSessionId.Length != 0) hash ^= WpsSessionId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WpsSessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WpsSessionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WpsSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WpsSessionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WpsStartEvent other) {
      if (other == null) {
        return;
      }
      if (other.WpsSessionId.Length != 0) {
        WpsSessionId = other.WpsSessionId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WpsSessionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WpsAvailableEvent : pb::IMessage<WpsAvailableEvent> {
    private static readonly pb::MessageParser<WpsAvailableEvent> _parser = new pb::MessageParser<WpsAvailableEvent>(() => new WpsAvailableEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WpsAvailableEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WpsAvailableEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WpsAvailableEvent(WpsAvailableEvent other) : this() {
      wpsSessionId_ = other.wpsSessionId_;
      timeToAvailableMs_ = other.timeToAvailableMs_;
      distanceToAvailableM_ = other.distanceToAvailableM_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WpsAvailableEvent Clone() {
      return new WpsAvailableEvent(this);
    }

    /// <summary>Field number for the "wps_session_id" field.</summary>
    public const int WpsSessionIdFieldNumber = 1;
    private string wpsSessionId_ = "";
    /// <summary>
    ///  Unique ID for the WPS session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WpsSessionId {
      get { return wpsSessionId_; }
      set {
        wpsSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time_to_available_ms" field.</summary>
    public const int TimeToAvailableMsFieldNumber = 2;
    private long timeToAvailableMs_;
    /// <summary>
    ///  Time required for the first transition to 'Available' status (milliseconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeToAvailableMs {
      get { return timeToAvailableMs_; }
      set {
        timeToAvailableMs_ = value;
      }
    }

    /// <summary>Field number for the "distance_to_available_m" field.</summary>
    public const int DistanceToAvailableMFieldNumber = 3;
    private float distanceToAvailableM_;
    /// <summary>
    ///  Distance walked before the first transition to 'Available' status (metres)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DistanceToAvailableM {
      get { return distanceToAvailableM_; }
      set {
        distanceToAvailableM_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WpsAvailableEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WpsAvailableEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WpsSessionId != other.WpsSessionId) return false;
      if (TimeToAvailableMs != other.TimeToAvailableMs) return false;
      if (DistanceToAvailableM != other.DistanceToAvailableM) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WpsSessionId.Length != 0) hash ^= WpsSessionId.GetHashCode();
      if (TimeToAvailableMs != 0L) hash ^= TimeToAvailableMs.GetHashCode();
      if (DistanceToAvailableM != 0F) hash ^= DistanceToAvailableM.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WpsSessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WpsSessionId);
      }
      if (TimeToAvailableMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TimeToAvailableMs);
      }
      if (DistanceToAvailableM != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DistanceToAvailableM);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WpsSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WpsSessionId);
      }
      if (TimeToAvailableMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeToAvailableMs);
      }
      if (DistanceToAvailableM != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WpsAvailableEvent other) {
      if (other == null) {
        return;
      }
      if (other.WpsSessionId.Length != 0) {
        WpsSessionId = other.WpsSessionId;
      }
      if (other.TimeToAvailableMs != 0L) {
        TimeToAvailableMs = other.TimeToAvailableMs;
      }
      if (other.DistanceToAvailableM != 0F) {
        DistanceToAvailableM = other.DistanceToAvailableM;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WpsSessionId = input.ReadString();
            break;
          }
          case 16: {
            TimeToAvailableMs = input.ReadInt64();
            break;
          }
          case 29: {
            DistanceToAvailableM = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WpsStopEvent : pb::IMessage<WpsStopEvent> {
    private static readonly pb::MessageParser<WpsStopEvent> _parser = new pb::MessageParser<WpsStopEvent>(() => new WpsStopEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WpsStopEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Niantic.Lightship.AR.Protobuf.ArdkNextTelemetryReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WpsStopEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WpsStopEvent(WpsStopEvent other) : this() {
      wpsSessionId_ = other.wpsSessionId_;
      sessionTimeMs_ = other.sessionTimeMs_;
      sessionDistanceM_ = other.sessionDistanceM_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WpsStopEvent Clone() {
      return new WpsStopEvent(this);
    }

    /// <summary>Field number for the "wps_session_id" field.</summary>
    public const int WpsSessionIdFieldNumber = 1;
    private string wpsSessionId_ = "";
    /// <summary>
    ///  Unique ID for the WPS session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WpsSessionId {
      get { return wpsSessionId_; }
      set {
        wpsSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session_time_ms" field.</summary>
    public const int SessionTimeMsFieldNumber = 2;
    private long sessionTimeMs_;
    /// <summary>
    ///  Total time session enabled for (milliseconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SessionTimeMs {
      get { return sessionTimeMs_; }
      set {
        sessionTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "session_distance_m" field.</summary>
    public const int SessionDistanceMFieldNumber = 3;
    private float sessionDistanceM_;
    /// <summary>
    ///  Distance walked during the session (metres)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SessionDistanceM {
      get { return sessionDistanceM_; }
      set {
        sessionDistanceM_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WpsStopEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WpsStopEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WpsSessionId != other.WpsSessionId) return false;
      if (SessionTimeMs != other.SessionTimeMs) return false;
      if (SessionDistanceM != other.SessionDistanceM) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WpsSessionId.Length != 0) hash ^= WpsSessionId.GetHashCode();
      if (SessionTimeMs != 0L) hash ^= SessionTimeMs.GetHashCode();
      if (SessionDistanceM != 0F) hash ^= SessionDistanceM.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WpsSessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WpsSessionId);
      }
      if (SessionTimeMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SessionTimeMs);
      }
      if (SessionDistanceM != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SessionDistanceM);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WpsSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WpsSessionId);
      }
      if (SessionTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SessionTimeMs);
      }
      if (SessionDistanceM != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WpsStopEvent other) {
      if (other == null) {
        return;
      }
      if (other.WpsSessionId.Length != 0) {
        WpsSessionId = other.WpsSessionId;
      }
      if (other.SessionTimeMs != 0L) {
        SessionTimeMs = other.SessionTimeMs;
      }
      if (other.SessionDistanceM != 0F) {
        SessionDistanceM = other.SessionDistanceM;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WpsSessionId = input.ReadString();
            break;
          }
          case 16: {
            SessionTimeMs = input.ReadInt64();
            break;
          }
          case 29: {
            SessionDistanceM = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
